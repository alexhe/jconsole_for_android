package org.dykman.jn.android.text;
public class SpannableStringBuilder extends android.text.SpannableStringBuilder{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public SpannableStringBuilder(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
public SpannableStringBuilder(java.lang.CharSequence arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
public SpannableStringBuilder(java.lang.CharSequence arg1,int arg2,int arg3, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public java.lang.String toString(){ if (!testjnOverride( "toString" )) return super.toString(); return (java.lang.String) jInterface.Jnido( this, jchildidx + "toString_" + jlocale + "_", null ); }
@Override public void clear(){ if (!testjnOverride( "clear" )) { super.clear(); return; } jInterface.Jnido( this, jchildidx + "clear_" + jlocale + "_", null ); }
@Override public char charAt(int arg1) { if (!testjnOverride( "charAt" )) return super.charAt( arg1); return (java.lang.Character) jInterface.Jnido( this, jchildidx + "charAt_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void getChars(int arg1,int arg2,char[] arg3,int arg4) { if (!testjnOverride( "getChars" )) { super.getChars( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "getChars_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public int length(){ if (!testjnOverride( "length" )) return super.length(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "length_" + jlocale + "_", null ); }
@Override public java.lang.CharSequence subSequence(int arg1,int arg2) { if (!testjnOverride( "subSequence" )) return super.subSequence( arg1, arg2); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "subSequence_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void clearSpans(){ if (!testjnOverride( "clearSpans" )) { super.clearSpans(); return; } jInterface.Jnido( this, jchildidx + "clearSpans_" + jlocale + "_", null ); }
@Override public void setSpan(java.lang.Object arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "setSpan" )) { super.setSpan( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "setSpan_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void removeSpan(java.lang.Object arg1) { if (!testjnOverride( "removeSpan" )) { super.removeSpan( arg1); return; } jInterface.Jnido( this, jchildidx + "removeSpan_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getSpanStart(java.lang.Object arg1) { if (!testjnOverride( "getSpanStart" )) return super.getSpanStart( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSpanStart_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getSpanEnd(java.lang.Object arg1) { if (!testjnOverride( "getSpanEnd" )) return super.getSpanEnd( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSpanEnd_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getSpanFlags(java.lang.Object arg1) { if (!testjnOverride( "getSpanFlags" )) return super.getSpanFlags( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSpanFlags_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.Object[] getSpans(int arg1,int arg2,java.lang.Class arg3) { if (!testjnOverride( "getSpans" )) return super.getSpans( arg1, arg2, arg3); return (java.lang.Object[]) jInterface.Jnidox( this, jchildidx + "getSpans_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int nextSpanTransition(int arg1,int arg2,java.lang.Class arg3) { if (!testjnOverride( "nextSpanTransition" )) return super.nextSpanTransition( arg1, arg2, arg3); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "nextSpanTransition_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void setFilters(android.text.InputFilter[] arg1) { if (!testjnOverride( "setFilters" )) { super.setFilters( arg1); return; } jInterface.Jnido( this, jchildidx + "setFilters_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.text.InputFilter[] getFilters(){ if (!testjnOverride( "getFilters" )) return super.getFilters(); return (android.text.InputFilter[]) jInterface.Jnidox( this, jchildidx + "getFilters_" + jlocale + "_", null ); }
}

package org.dykman.jn.android.text;
public class StaticLayout extends android.text.StaticLayout{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public StaticLayout(java.lang.CharSequence arg1,android.text.TextPaint arg2,int arg3,android.text.Layout.Alignment arg4,float arg5,float arg6,boolean arg7, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3, arg4, arg5, arg6, arg7); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7 } ); }
public StaticLayout(java.lang.CharSequence arg1,int arg2,int arg3,android.text.TextPaint arg4,int arg5,android.text.Layout.Alignment arg6,float arg7,float arg8,boolean arg9, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 } ); }
public StaticLayout(java.lang.CharSequence arg1,int arg2,int arg3,android.text.TextPaint arg4,int arg5,android.text.Layout.Alignment arg6,float arg7,float arg8,boolean arg9,android.text.TextUtils.TruncateAt arg10,int arg11, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11 } ); }
@Override public int getLineForVertical(int arg1) { if (!testjnOverride( "getLineForVertical" )) return super.getLineForVertical( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getLineForVertical_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getLineCount(){ if (!testjnOverride( "getLineCount" )) return super.getLineCount(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getLineCount_" + jlocale + "_", null ); }
@Override public int getLineTop(int arg1) { if (!testjnOverride( "getLineTop" )) return super.getLineTop( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getLineTop_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getLineDescent(int arg1) { if (!testjnOverride( "getLineDescent" )) return super.getLineDescent( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getLineDescent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getLineStart(int arg1) { if (!testjnOverride( "getLineStart" )) return super.getLineStart( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getLineStart_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getParagraphDirection(int arg1) { if (!testjnOverride( "getParagraphDirection" )) return super.getParagraphDirection( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getParagraphDirection_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean getLineContainsTab(int arg1) { if (!testjnOverride( "getLineContainsTab" )) return super.getLineContainsTab( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "getLineContainsTab_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getTopPadding(){ if (!testjnOverride( "getTopPadding" )) return super.getTopPadding(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getTopPadding_" + jlocale + "_", null ); }
@Override public int getBottomPadding(){ if (!testjnOverride( "getBottomPadding" )) return super.getBottomPadding(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getBottomPadding_" + jlocale + "_", null ); }
@Override public int getEllipsisCount(int arg1) { if (!testjnOverride( "getEllipsisCount" )) return super.getEllipsisCount( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getEllipsisCount_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getEllipsisStart(int arg1) { if (!testjnOverride( "getEllipsisStart" )) return super.getEllipsisStart( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getEllipsisStart_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getEllipsizedWidth(){ if (!testjnOverride( "getEllipsizedWidth" )) return super.getEllipsizedWidth(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getEllipsizedWidth_" + jlocale + "_", null ); }
}

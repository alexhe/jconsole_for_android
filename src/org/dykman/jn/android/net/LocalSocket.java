package org.dykman.jn.android.net;
public class LocalSocket extends android.net.LocalSocket{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public LocalSocket(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
@Override public java.lang.String toString(){ if (!testjnOverride( "toString" )) return super.toString(); return (java.lang.String) jInterface.Jnido( this, jchildidx + "toString_" + jlocale + "_", null ); }
@Override public void close() throws java.io.IOException{ if (!testjnOverride( "close" )) { super.close(); return; } jInterface.Jnido( this, jchildidx + "close_" + jlocale + "_", null ); }
@Override public java.io.InputStream getInputStream() throws java.io.IOException{ if (!testjnOverride( "getInputStream" )) return super.getInputStream(); return (java.io.InputStream) jInterface.Jnido( this, jchildidx + "getInputStream_" + jlocale + "_", null ); }
@Override public void connect(android.net.LocalSocketAddress arg1) throws java.io.IOException { if (!testjnOverride( "connect" )) { super.connect( arg1); return; } jInterface.Jnido( this, jchildidx + "connect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void connect(android.net.LocalSocketAddress arg1,int arg2) throws java.io.IOException { if (!testjnOverride( "connect" )) { super.connect( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "connect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.io.OutputStream getOutputStream() throws java.io.IOException{ if (!testjnOverride( "getOutputStream" )) return super.getOutputStream(); return (java.io.OutputStream) jInterface.Jnido( this, jchildidx + "getOutputStream_" + jlocale + "_", null ); }
@Override public boolean isClosed(){ if (!testjnOverride( "isClosed" )) return super.isClosed(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isClosed_" + jlocale + "_", null ); }
@Override public void bind(android.net.LocalSocketAddress arg1) throws java.io.IOException { if (!testjnOverride( "bind" )) { super.bind( arg1); return; } jInterface.Jnido( this, jchildidx + "bind_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.net.LocalSocketAddress getLocalSocketAddress(){ if (!testjnOverride( "getLocalSocketAddress" )) return super.getLocalSocketAddress(); return (android.net.LocalSocketAddress) jInterface.Jnido( this, jchildidx + "getLocalSocketAddress_" + jlocale + "_", null ); }
@Override public void shutdownInput() throws java.io.IOException{ if (!testjnOverride( "shutdownInput" )) { super.shutdownInput(); return; } jInterface.Jnido( this, jchildidx + "shutdownInput_" + jlocale + "_", null ); }
@Override public void shutdownOutput() throws java.io.IOException{ if (!testjnOverride( "shutdownOutput" )) { super.shutdownOutput(); return; } jInterface.Jnido( this, jchildidx + "shutdownOutput_" + jlocale + "_", null ); }
@Override public void setReceiveBufferSize(int arg1) throws java.io.IOException { if (!testjnOverride( "setReceiveBufferSize" )) { super.setReceiveBufferSize( arg1); return; } jInterface.Jnido( this, jchildidx + "setReceiveBufferSize_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getReceiveBufferSize() throws java.io.IOException{ if (!testjnOverride( "getReceiveBufferSize" )) return super.getReceiveBufferSize(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getReceiveBufferSize_" + jlocale + "_", null ); }
@Override public void setSoTimeout(int arg1) throws java.io.IOException { if (!testjnOverride( "setSoTimeout" )) { super.setSoTimeout( arg1); return; } jInterface.Jnido( this, jchildidx + "setSoTimeout_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getSoTimeout() throws java.io.IOException{ if (!testjnOverride( "getSoTimeout" )) return super.getSoTimeout(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSoTimeout_" + jlocale + "_", null ); }
@Override public void setSendBufferSize(int arg1) throws java.io.IOException { if (!testjnOverride( "setSendBufferSize" )) { super.setSendBufferSize( arg1); return; } jInterface.Jnido( this, jchildidx + "setSendBufferSize_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getSendBufferSize() throws java.io.IOException{ if (!testjnOverride( "getSendBufferSize" )) return super.getSendBufferSize(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSendBufferSize_" + jlocale + "_", null ); }
@Override public android.net.LocalSocketAddress getRemoteSocketAddress(){ if (!testjnOverride( "getRemoteSocketAddress" )) return super.getRemoteSocketAddress(); return (android.net.LocalSocketAddress) jInterface.Jnido( this, jchildidx + "getRemoteSocketAddress_" + jlocale + "_", null ); }
@Override public synchronized boolean isConnected(){ if (!testjnOverride( "isConnected" )) return super.isConnected(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isConnected_" + jlocale + "_", null ); }
@Override public synchronized boolean isBound(){ if (!testjnOverride( "isBound" )) return super.isBound(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isBound_" + jlocale + "_", null ); }
@Override public boolean isOutputShutdown(){ if (!testjnOverride( "isOutputShutdown" )) return super.isOutputShutdown(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isOutputShutdown_" + jlocale + "_", null ); }
@Override public boolean isInputShutdown(){ if (!testjnOverride( "isInputShutdown" )) return super.isInputShutdown(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isInputShutdown_" + jlocale + "_", null ); }
@Override public void setFileDescriptorsForSend(java.io.FileDescriptor[] arg1) { if (!testjnOverride( "setFileDescriptorsForSend" )) { super.setFileDescriptorsForSend( arg1); return; } jInterface.Jnido( this, jchildidx + "setFileDescriptorsForSend_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.io.FileDescriptor[] getAncillaryFileDescriptors() throws java.io.IOException{ if (!testjnOverride( "getAncillaryFileDescriptors" )) return super.getAncillaryFileDescriptors(); return (java.io.FileDescriptor[]) jInterface.Jnidox( this, jchildidx + "getAncillaryFileDescriptors_" + jlocale + "_", null ); }
@Override public android.net.Credentials getPeerCredentials() throws java.io.IOException{ if (!testjnOverride( "getPeerCredentials" )) return super.getPeerCredentials(); return (android.net.Credentials) jInterface.Jnido( this, jchildidx + "getPeerCredentials_" + jlocale + "_", null ); }
@Override public java.io.FileDescriptor getFileDescriptor(){ if (!testjnOverride( "getFileDescriptor" )) return super.getFileDescriptor(); return (java.io.FileDescriptor) jInterface.Jnido( this, jchildidx + "getFileDescriptor_" + jlocale + "_", null ); }
}

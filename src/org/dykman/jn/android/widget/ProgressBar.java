package org.dykman.jn.android.widget;
public class ProgressBar extends android.widget.ProgressBar{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public ProgressBar(android.content.Context arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
public ProgressBar(android.content.Context arg1,android.util.AttributeSet arg2, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
public ProgressBar(android.content.Context arg1,android.util.AttributeSet arg2,int arg3, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public synchronized boolean isIndeterminate(){ if (!testjnOverride( "isIndeterminate" )) return super.isIndeterminate(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isIndeterminate_" + jlocale + "_", null ); }
@Override public synchronized void setIndeterminate(boolean arg1) { if (!testjnOverride( "setIndeterminate" )) { super.setIndeterminate( arg1); return; } jInterface.Jnido( this, jchildidx + "setIndeterminate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.drawable.Drawable getIndeterminateDrawable(){ if (!testjnOverride( "getIndeterminateDrawable" )) return super.getIndeterminateDrawable(); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getIndeterminateDrawable_" + jlocale + "_", null ); }
@Override public void setIndeterminateDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "setIndeterminateDrawable" )) { super.setIndeterminateDrawable( arg1); return; } jInterface.Jnido( this, jchildidx + "setIndeterminateDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.drawable.Drawable getProgressDrawable(){ if (!testjnOverride( "getProgressDrawable" )) return super.getProgressDrawable(); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getProgressDrawable_" + jlocale + "_", null ); }
@Override public void setProgressDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "setProgressDrawable" )) { super.setProgressDrawable( arg1); return; } jInterface.Jnido( this, jchildidx + "setProgressDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected boolean verifyDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "verifyDrawable" )) return super.verifyDrawable( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "verifyDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void postInvalidate(){ if (!testjnOverride( "postInvalidate" )) { super.postInvalidate(); return; } jInterface.Jnido( this, jchildidx + "postInvalidate_" + jlocale + "_", null ); }
@Override public synchronized void setProgress(int arg1) { if (!testjnOverride( "setProgress" )) { super.setProgress( arg1); return; } jInterface.Jnido( this, jchildidx + "setProgress_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public synchronized void setSecondaryProgress(int arg1) { if (!testjnOverride( "setSecondaryProgress" )) { super.setSecondaryProgress( arg1); return; } jInterface.Jnido( this, jchildidx + "setSecondaryProgress_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public synchronized int getProgress(){ if (!testjnOverride( "getProgress" )) return super.getProgress(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getProgress_" + jlocale + "_", null ); }
@Override public synchronized int getSecondaryProgress(){ if (!testjnOverride( "getSecondaryProgress" )) return super.getSecondaryProgress(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSecondaryProgress_" + jlocale + "_", null ); }
@Override public synchronized int getMax(){ if (!testjnOverride( "getMax" )) return super.getMax(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getMax_" + jlocale + "_", null ); }
@Override public synchronized void setMax(int arg1) { if (!testjnOverride( "setMax" )) { super.setMax( arg1); return; } jInterface.Jnido( this, jchildidx + "setMax_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setInterpolator(android.content.Context arg1,int arg2) { if (!testjnOverride( "setInterpolator" )) { super.setInterpolator( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setInterpolator_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setInterpolator(android.view.animation.Interpolator arg1) { if (!testjnOverride( "setInterpolator" )) { super.setInterpolator( arg1); return; } jInterface.Jnido( this, jchildidx + "setInterpolator_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.view.animation.Interpolator getInterpolator(){ if (!testjnOverride( "getInterpolator" )) return super.getInterpolator(); return (android.view.animation.Interpolator) jInterface.Jnido( this, jchildidx + "getInterpolator_" + jlocale + "_", null ); }
@Override public void setVisibility(int arg1) { if (!testjnOverride( "setVisibility" )) { super.setVisibility( arg1); return; } jInterface.Jnido( this, jchildidx + "setVisibility_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void invalidateDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "invalidateDrawable" )) { super.invalidateDrawable( arg1); return; } jInterface.Jnido( this, jchildidx + "invalidateDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void onSizeChanged(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "onSizeChanged" )) { super.onSizeChanged( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "onSizeChanged_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override protected synchronized void onDraw(android.graphics.Canvas arg1) { if (!testjnOverride( "onDraw" )) { super.onDraw( arg1); return; } jInterface.Jnido( this, jchildidx + "onDraw_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected synchronized void onMeasure(int arg1,int arg2) { if (!testjnOverride( "onMeasure" )) { super.onMeasure( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onMeasure_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override protected void drawableStateChanged(){ if (!testjnOverride( "drawableStateChanged" )) { super.drawableStateChanged(); return; } jInterface.Jnido( this, jchildidx + "drawableStateChanged_" + jlocale + "_", null ); }
@Override public android.os.Parcelable onSaveInstanceState(){ if (!testjnOverride( "onSaveInstanceState" )) return super.onSaveInstanceState(); return (android.os.Parcelable) jInterface.Jnido( this, jchildidx + "onSaveInstanceState_" + jlocale + "_", null ); }
@Override public void onRestoreInstanceState(android.os.Parcelable arg1) { if (!testjnOverride( "onRestoreInstanceState" )) { super.onRestoreInstanceState( arg1); return; } jInterface.Jnido( this, jchildidx + "onRestoreInstanceState_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
}

package org.dykman.jn.android.widget;
public class TextView extends android.widget.TextView{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public TextView(android.content.Context arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
public TextView(android.content.Context arg1,android.util.AttributeSet arg2, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
public TextView(android.content.Context arg1,android.util.AttributeSet arg2,int arg3, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int length(){ if (!testjnOverride( "length" )) return super.length(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "length_" + jlocale + "_", null ); }
@Override public void debug(int arg1) { if (!testjnOverride( "debug" )) { super.debug( arg1); return; } jInterface.Jnido( this, jchildidx + "debug_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setError(java.lang.CharSequence arg1) { if (!testjnOverride( "setError" )) { super.setError( arg1); return; } jInterface.Jnido( this, jchildidx + "setError_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setError(java.lang.CharSequence arg1,android.graphics.drawable.Drawable arg2) { if (!testjnOverride( "setError" )) { super.setError( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setError_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setTypeface(android.graphics.Typeface arg1,int arg2) { if (!testjnOverride( "setTypeface" )) { super.setTypeface( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setTypeface_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setTypeface(android.graphics.Typeface arg1) { if (!testjnOverride( "setTypeface" )) { super.setTypeface( arg1); return; } jInterface.Jnido( this, jchildidx + "setTypeface_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected boolean getDefaultEditable(){ if (!testjnOverride( "getDefaultEditable" )) return super.getDefaultEditable(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "getDefaultEditable_" + jlocale + "_", null ); }
@Override protected android.text.method.MovementMethod getDefaultMovementMethod(){ if (!testjnOverride( "getDefaultMovementMethod" )) return super.getDefaultMovementMethod(); return (android.text.method.MovementMethod) jInterface.Jnido( this, jchildidx + "getDefaultMovementMethod_" + jlocale + "_", null ); }
@Override public java.lang.CharSequence getText(){ if (!testjnOverride( "getText" )) return super.getText(); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getText_" + jlocale + "_", null ); }
@Override public android.text.Editable getEditableText(){ if (!testjnOverride( "getEditableText" )) return super.getEditableText(); return (android.text.Editable) jInterface.Jnido( this, jchildidx + "getEditableText_" + jlocale + "_", null ); }
@Override public int getLineHeight(){ if (!testjnOverride( "getLineHeight" )) return super.getLineHeight(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getLineHeight_" + jlocale + "_", null ); }
@Override public void setKeyListener(android.text.method.KeyListener arg1) { if (!testjnOverride( "setKeyListener" )) { super.setKeyListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setKeyListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getCompoundPaddingTop(){ if (!testjnOverride( "getCompoundPaddingTop" )) return super.getCompoundPaddingTop(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getCompoundPaddingTop_" + jlocale + "_", null ); }
@Override public int getCompoundPaddingBottom(){ if (!testjnOverride( "getCompoundPaddingBottom" )) return super.getCompoundPaddingBottom(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getCompoundPaddingBottom_" + jlocale + "_", null ); }
@Override public int getCompoundPaddingLeft(){ if (!testjnOverride( "getCompoundPaddingLeft" )) return super.getCompoundPaddingLeft(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getCompoundPaddingLeft_" + jlocale + "_", null ); }
@Override public int getCompoundPaddingRight(){ if (!testjnOverride( "getCompoundPaddingRight" )) return super.getCompoundPaddingRight(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getCompoundPaddingRight_" + jlocale + "_", null ); }
@Override public int getExtendedPaddingTop(){ if (!testjnOverride( "getExtendedPaddingTop" )) return super.getExtendedPaddingTop(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getExtendedPaddingTop_" + jlocale + "_", null ); }
@Override public int getExtendedPaddingBottom(){ if (!testjnOverride( "getExtendedPaddingBottom" )) return super.getExtendedPaddingBottom(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getExtendedPaddingBottom_" + jlocale + "_", null ); }
@Override public int getTotalPaddingLeft(){ if (!testjnOverride( "getTotalPaddingLeft" )) return super.getTotalPaddingLeft(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getTotalPaddingLeft_" + jlocale + "_", null ); }
@Override public int getTotalPaddingRight(){ if (!testjnOverride( "getTotalPaddingRight" )) return super.getTotalPaddingRight(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getTotalPaddingRight_" + jlocale + "_", null ); }
@Override public int getTotalPaddingTop(){ if (!testjnOverride( "getTotalPaddingTop" )) return super.getTotalPaddingTop(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getTotalPaddingTop_" + jlocale + "_", null ); }
@Override public int getTotalPaddingBottom(){ if (!testjnOverride( "getTotalPaddingBottom" )) return super.getTotalPaddingBottom(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getTotalPaddingBottom_" + jlocale + "_", null ); }
@Override public void setCompoundDrawables(android.graphics.drawable.Drawable arg1,android.graphics.drawable.Drawable arg2,android.graphics.drawable.Drawable arg3,android.graphics.drawable.Drawable arg4) { if (!testjnOverride( "setCompoundDrawables" )) { super.setCompoundDrawables( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "setCompoundDrawables_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void setCompoundDrawablesWithIntrinsicBounds(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "setCompoundDrawablesWithIntrinsicBounds" )) { super.setCompoundDrawablesWithIntrinsicBounds( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "setCompoundDrawablesWithIntrinsicBounds_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable arg1,android.graphics.drawable.Drawable arg2,android.graphics.drawable.Drawable arg3,android.graphics.drawable.Drawable arg4) { if (!testjnOverride( "setCompoundDrawablesWithIntrinsicBounds" )) { super.setCompoundDrawablesWithIntrinsicBounds( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "setCompoundDrawablesWithIntrinsicBounds_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public android.graphics.drawable.Drawable[] getCompoundDrawables(){ if (!testjnOverride( "getCompoundDrawables" )) return super.getCompoundDrawables(); return (android.graphics.drawable.Drawable[]) jInterface.Jnidox( this, jchildidx + "getCompoundDrawables_" + jlocale + "_", null ); }
@Override public void setCompoundDrawablePadding(int arg1) { if (!testjnOverride( "setCompoundDrawablePadding" )) { super.setCompoundDrawablePadding( arg1); return; } jInterface.Jnido( this, jchildidx + "setCompoundDrawablePadding_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getCompoundDrawablePadding(){ if (!testjnOverride( "getCompoundDrawablePadding" )) return super.getCompoundDrawablePadding(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getCompoundDrawablePadding_" + jlocale + "_", null ); }
@Override public void setPadding(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "setPadding" )) { super.setPadding( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "setPadding_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void setTextAppearance(android.content.Context arg1,int arg2) { if (!testjnOverride( "setTextAppearance" )) { super.setTextAppearance( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setTextAppearance_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public float getTextSize(){ if (!testjnOverride( "getTextSize" )) return super.getTextSize(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getTextSize_" + jlocale + "_", null ); }
@Override public void setTextSize(float arg1) { if (!testjnOverride( "setTextSize" )) { super.setTextSize( arg1); return; } jInterface.Jnido( this, jchildidx + "setTextSize_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setTextSize(int arg1,float arg2) { if (!testjnOverride( "setTextSize" )) { super.setTextSize( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setTextSize_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public float getTextScaleX(){ if (!testjnOverride( "getTextScaleX" )) return super.getTextScaleX(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getTextScaleX_" + jlocale + "_", null ); }
@Override public void setTextScaleX(float arg1) { if (!testjnOverride( "setTextScaleX" )) { super.setTextScaleX( arg1); return; } jInterface.Jnido( this, jchildidx + "setTextScaleX_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.Typeface getTypeface(){ if (!testjnOverride( "getTypeface" )) return super.getTypeface(); return (android.graphics.Typeface) jInterface.Jnido( this, jchildidx + "getTypeface_" + jlocale + "_", null ); }
@Override public void setTextColor(int arg1) { if (!testjnOverride( "setTextColor" )) { super.setTextColor( arg1); return; } jInterface.Jnido( this, jchildidx + "setTextColor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setTextColor(android.content.res.ColorStateList arg1) { if (!testjnOverride( "setTextColor" )) { super.setTextColor( arg1); return; } jInterface.Jnido( this, jchildidx + "setTextColor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setHighlightColor(int arg1) { if (!testjnOverride( "setHighlightColor" )) { super.setHighlightColor( arg1); return; } jInterface.Jnido( this, jchildidx + "setHighlightColor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setShadowLayer(float arg1,float arg2,float arg3,int arg4) { if (!testjnOverride( "setShadowLayer" )) { super.setShadowLayer( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "setShadowLayer_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public android.text.TextPaint getPaint(){ if (!testjnOverride( "getPaint" )) return super.getPaint(); return (android.text.TextPaint) jInterface.Jnido( this, jchildidx + "getPaint_" + jlocale + "_", null ); }
@Override public android.text.style.URLSpan[] getUrls(){ if (!testjnOverride( "getUrls" )) return super.getUrls(); return (android.text.style.URLSpan[]) jInterface.Jnidox( this, jchildidx + "getUrls_" + jlocale + "_", null ); }
@Override public void setGravity(int arg1) { if (!testjnOverride( "setGravity" )) { super.setGravity( arg1); return; } jInterface.Jnido( this, jchildidx + "setGravity_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getGravity(){ if (!testjnOverride( "getGravity" )) return super.getGravity(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getGravity_" + jlocale + "_", null ); }
@Override public int getPaintFlags(){ if (!testjnOverride( "getPaintFlags" )) return super.getPaintFlags(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getPaintFlags_" + jlocale + "_", null ); }
@Override public void setPaintFlags(int arg1) { if (!testjnOverride( "setPaintFlags" )) { super.setPaintFlags( arg1); return; } jInterface.Jnido( this, jchildidx + "setPaintFlags_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setHorizontallyScrolling(boolean arg1) { if (!testjnOverride( "setHorizontallyScrolling" )) { super.setHorizontallyScrolling( arg1); return; } jInterface.Jnido( this, jchildidx + "setHorizontallyScrolling_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setMinLines(int arg1) { if (!testjnOverride( "setMinLines" )) { super.setMinLines( arg1); return; } jInterface.Jnido( this, jchildidx + "setMinLines_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setMinHeight(int arg1) { if (!testjnOverride( "setMinHeight" )) { super.setMinHeight( arg1); return; } jInterface.Jnido( this, jchildidx + "setMinHeight_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setMaxLines(int arg1) { if (!testjnOverride( "setMaxLines" )) { super.setMaxLines( arg1); return; } jInterface.Jnido( this, jchildidx + "setMaxLines_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setMaxHeight(int arg1) { if (!testjnOverride( "setMaxHeight" )) { super.setMaxHeight( arg1); return; } jInterface.Jnido( this, jchildidx + "setMaxHeight_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setLines(int arg1) { if (!testjnOverride( "setLines" )) { super.setLines( arg1); return; } jInterface.Jnido( this, jchildidx + "setLines_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setHeight(int arg1) { if (!testjnOverride( "setHeight" )) { super.setHeight( arg1); return; } jInterface.Jnido( this, jchildidx + "setHeight_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setMinEms(int arg1) { if (!testjnOverride( "setMinEms" )) { super.setMinEms( arg1); return; } jInterface.Jnido( this, jchildidx + "setMinEms_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setMinWidth(int arg1) { if (!testjnOverride( "setMinWidth" )) { super.setMinWidth( arg1); return; } jInterface.Jnido( this, jchildidx + "setMinWidth_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setMaxEms(int arg1) { if (!testjnOverride( "setMaxEms" )) { super.setMaxEms( arg1); return; } jInterface.Jnido( this, jchildidx + "setMaxEms_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setMaxWidth(int arg1) { if (!testjnOverride( "setMaxWidth" )) { super.setMaxWidth( arg1); return; } jInterface.Jnido( this, jchildidx + "setMaxWidth_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setEms(int arg1) { if (!testjnOverride( "setEms" )) { super.setEms( arg1); return; } jInterface.Jnido( this, jchildidx + "setEms_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setWidth(int arg1) { if (!testjnOverride( "setWidth" )) { super.setWidth( arg1); return; } jInterface.Jnido( this, jchildidx + "setWidth_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setLineSpacing(float arg1,float arg2) { if (!testjnOverride( "setLineSpacing" )) { super.setLineSpacing( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setLineSpacing_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override protected void drawableStateChanged(){ if (!testjnOverride( "drawableStateChanged" )) { super.drawableStateChanged(); return; } jInterface.Jnido( this, jchildidx + "drawableStateChanged_" + jlocale + "_", null ); }
@Override public android.os.Parcelable onSaveInstanceState(){ if (!testjnOverride( "onSaveInstanceState" )) return super.onSaveInstanceState(); return (android.os.Parcelable) jInterface.Jnido( this, jchildidx + "onSaveInstanceState_" + jlocale + "_", null ); }
@Override public void onRestoreInstanceState(android.os.Parcelable arg1) { if (!testjnOverride( "onRestoreInstanceState" )) { super.onRestoreInstanceState( arg1); return; } jInterface.Jnido( this, jchildidx + "onRestoreInstanceState_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setFreezesText(boolean arg1) { if (!testjnOverride( "setFreezesText" )) { super.setFreezesText( arg1); return; } jInterface.Jnido( this, jchildidx + "setFreezesText_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean getFreezesText(){ if (!testjnOverride( "getFreezesText" )) return super.getFreezesText(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "getFreezesText_" + jlocale + "_", null ); }
@Override public void setText(java.lang.CharSequence arg1,android.widget.TextView.BufferType arg2) { if (!testjnOverride( "setText" )) { super.setText( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.lang.CharSequence getHint(){ if (!testjnOverride( "getHint" )) return super.getHint(); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getHint_" + jlocale + "_", null ); }
@Override public void setInputType(int arg1) { if (!testjnOverride( "setInputType" )) { super.setInputType( arg1); return; } jInterface.Jnido( this, jchildidx + "setInputType_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setRawInputType(int arg1) { if (!testjnOverride( "setRawInputType" )) { super.setRawInputType( arg1); return; } jInterface.Jnido( this, jchildidx + "setRawInputType_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getInputType(){ if (!testjnOverride( "getInputType" )) return super.getInputType(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getInputType_" + jlocale + "_", null ); }
@Override public void setImeOptions(int arg1) { if (!testjnOverride( "setImeOptions" )) { super.setImeOptions( arg1); return; } jInterface.Jnido( this, jchildidx + "setImeOptions_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getImeOptions(){ if (!testjnOverride( "getImeOptions" )) return super.getImeOptions(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getImeOptions_" + jlocale + "_", null ); }
@Override public void setImeActionLabel(java.lang.CharSequence arg1,int arg2) { if (!testjnOverride( "setImeActionLabel" )) { super.setImeActionLabel( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setImeActionLabel_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.lang.CharSequence getImeActionLabel(){ if (!testjnOverride( "getImeActionLabel" )) return super.getImeActionLabel(); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getImeActionLabel_" + jlocale + "_", null ); }
@Override public int getImeActionId(){ if (!testjnOverride( "getImeActionId" )) return super.getImeActionId(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getImeActionId_" + jlocale + "_", null ); }
@Override public void setOnEditorActionListener(android.widget.TextView.OnEditorActionListener arg1) { if (!testjnOverride( "setOnEditorActionListener" )) { super.setOnEditorActionListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnEditorActionListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onEditorAction(int arg1) { if (!testjnOverride( "onEditorAction" )) { super.onEditorAction( arg1); return; } jInterface.Jnido( this, jchildidx + "onEditorAction_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setPrivateImeOptions(java.lang.String arg1) { if (!testjnOverride( "setPrivateImeOptions" )) { super.setPrivateImeOptions( arg1); return; } jInterface.Jnido( this, jchildidx + "setPrivateImeOptions_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String getPrivateImeOptions(){ if (!testjnOverride( "getPrivateImeOptions" )) return super.getPrivateImeOptions(); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getPrivateImeOptions_" + jlocale + "_", null ); }
@Override public void setInputExtras(int arg1) throws org.xmlpull.v1.XmlPullParserException,java.io.IOException { if (!testjnOverride( "setInputExtras" )) { super.setInputExtras( arg1); return; } jInterface.Jnido( this, jchildidx + "setInputExtras_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.os.Bundle getInputExtras(boolean arg1) { if (!testjnOverride( "getInputExtras" )) return super.getInputExtras( arg1); return (android.os.Bundle) jInterface.Jnido( this, jchildidx + "getInputExtras_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.CharSequence getError(){ if (!testjnOverride( "getError" )) return super.getError(); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getError_" + jlocale + "_", null ); }
@Override protected boolean setFrame(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "setFrame" )) return super.setFrame( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "setFrame_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void setFilters(android.text.InputFilter[] arg1) { if (!testjnOverride( "setFilters" )) { super.setFilters( arg1); return; } jInterface.Jnido( this, jchildidx + "setFilters_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.text.InputFilter[] getFilters(){ if (!testjnOverride( "getFilters" )) return super.getFilters(); return (android.text.InputFilter[]) jInterface.Jnidox( this, jchildidx + "getFilters_" + jlocale + "_", null ); }
@Override public boolean onPreDraw(){ if (!testjnOverride( "onPreDraw" )) return super.onPreDraw(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onPreDraw_" + jlocale + "_", null ); }
@Override protected void onAttachedToWindow(){ if (!testjnOverride( "onAttachedToWindow" )) { super.onAttachedToWindow(); return; } jInterface.Jnido( this, jchildidx + "onAttachedToWindow_" + jlocale + "_", null ); }
@Override protected void onDetachedFromWindow(){ if (!testjnOverride( "onDetachedFromWindow" )) { super.onDetachedFromWindow(); return; } jInterface.Jnido( this, jchildidx + "onDetachedFromWindow_" + jlocale + "_", null ); }
@Override protected boolean isPaddingOffsetRequired(){ if (!testjnOverride( "isPaddingOffsetRequired" )) return super.isPaddingOffsetRequired(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isPaddingOffsetRequired_" + jlocale + "_", null ); }
@Override protected int getLeftPaddingOffset(){ if (!testjnOverride( "getLeftPaddingOffset" )) return super.getLeftPaddingOffset(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getLeftPaddingOffset_" + jlocale + "_", null ); }
@Override protected int getTopPaddingOffset(){ if (!testjnOverride( "getTopPaddingOffset" )) return super.getTopPaddingOffset(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getTopPaddingOffset_" + jlocale + "_", null ); }
@Override protected int getBottomPaddingOffset(){ if (!testjnOverride( "getBottomPaddingOffset" )) return super.getBottomPaddingOffset(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getBottomPaddingOffset_" + jlocale + "_", null ); }
@Override protected int getRightPaddingOffset(){ if (!testjnOverride( "getRightPaddingOffset" )) return super.getRightPaddingOffset(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getRightPaddingOffset_" + jlocale + "_", null ); }
@Override protected boolean verifyDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "verifyDrawable" )) return super.verifyDrawable( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "verifyDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void invalidateDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "invalidateDrawable" )) { super.invalidateDrawable( arg1); return; } jInterface.Jnido( this, jchildidx + "invalidateDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void onDraw(android.graphics.Canvas arg1) { if (!testjnOverride( "onDraw" )) { super.onDraw( arg1); return; } jInterface.Jnido( this, jchildidx + "onDraw_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void getFocusedRect(android.graphics.Rect arg1) { if (!testjnOverride( "getFocusedRect" )) { super.getFocusedRect( arg1); return; } jInterface.Jnido( this, jchildidx + "getFocusedRect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getLineCount(){ if (!testjnOverride( "getLineCount" )) return super.getLineCount(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getLineCount_" + jlocale + "_", null ); }
@Override public int getLineBounds(int arg1,android.graphics.Rect arg2) { if (!testjnOverride( "getLineBounds" )) return super.getLineBounds( arg1, arg2); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getLineBounds_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int getBaseline(){ if (!testjnOverride( "getBaseline" )) return super.getBaseline(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getBaseline_" + jlocale + "_", null ); }
@Override public boolean onKeyDown(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyDown" )) return super.onKeyDown( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyDown_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onKeyMultiple(int arg1,int arg2,android.view.KeyEvent arg3) { if (!testjnOverride( "onKeyMultiple" )) return super.onKeyMultiple( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyMultiple_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean onKeyUp(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyUp" )) return super.onKeyUp( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyUp_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onCheckIsTextEditor(){ if (!testjnOverride( "onCheckIsTextEditor" )) return super.onCheckIsTextEditor(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onCheckIsTextEditor_" + jlocale + "_", null ); }
@Override public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo arg1) { if (!testjnOverride( "onCreateInputConnection" )) return super.onCreateInputConnection( arg1); return (android.view.inputmethod.InputConnection) jInterface.Jnido( this, jchildidx + "onCreateInputConnection_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean extractText(android.view.inputmethod.ExtractedTextRequest arg1,android.view.inputmethod.ExtractedText arg2) { if (!testjnOverride( "extractText" )) return super.extractText( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "extractText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setExtractedText(android.view.inputmethod.ExtractedText arg1) { if (!testjnOverride( "setExtractedText" )) { super.setExtractedText( arg1); return; } jInterface.Jnido( this, jchildidx + "setExtractedText_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onCommitCompletion(android.view.inputmethod.CompletionInfo arg1) { if (!testjnOverride( "onCommitCompletion" )) { super.onCommitCompletion( arg1); return; } jInterface.Jnido( this, jchildidx + "onCommitCompletion_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void beginBatchEdit(){ if (!testjnOverride( "beginBatchEdit" )) { super.beginBatchEdit(); return; } jInterface.Jnido( this, jchildidx + "beginBatchEdit_" + jlocale + "_", null ); }
@Override public void endBatchEdit(){ if (!testjnOverride( "endBatchEdit" )) { super.endBatchEdit(); return; } jInterface.Jnido( this, jchildidx + "endBatchEdit_" + jlocale + "_", null ); }
@Override public void onBeginBatchEdit(){ if (!testjnOverride( "onBeginBatchEdit" )) { super.onBeginBatchEdit(); return; } jInterface.Jnido( this, jchildidx + "onBeginBatchEdit_" + jlocale + "_", null ); }
@Override public void onEndBatchEdit(){ if (!testjnOverride( "onEndBatchEdit" )) { super.onEndBatchEdit(); return; } jInterface.Jnido( this, jchildidx + "onEndBatchEdit_" + jlocale + "_", null ); }
@Override public boolean onPrivateIMECommand(java.lang.String arg1,android.os.Bundle arg2) { if (!testjnOverride( "onPrivateIMECommand" )) return super.onPrivateIMECommand( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onPrivateIMECommand_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setIncludeFontPadding(boolean arg1) { if (!testjnOverride( "setIncludeFontPadding" )) { super.setIncludeFontPadding( arg1); return; } jInterface.Jnido( this, jchildidx + "setIncludeFontPadding_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void onMeasure(int arg1,int arg2) { if (!testjnOverride( "onMeasure" )) { super.onMeasure( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onMeasure_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean bringPointIntoView(int arg1) { if (!testjnOverride( "bringPointIntoView" )) return super.bringPointIntoView( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "bringPointIntoView_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean moveCursorToVisibleOffset(){ if (!testjnOverride( "moveCursorToVisibleOffset" )) return super.moveCursorToVisibleOffset(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "moveCursorToVisibleOffset_" + jlocale + "_", null ); }
@Override public void computeScroll(){ if (!testjnOverride( "computeScroll" )) { super.computeScroll(); return; } jInterface.Jnido( this, jchildidx + "computeScroll_" + jlocale + "_", null ); }
@Override public int getSelectionStart(){ if (!testjnOverride( "getSelectionStart" )) return super.getSelectionStart(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSelectionStart_" + jlocale + "_", null ); }
@Override public int getSelectionEnd(){ if (!testjnOverride( "getSelectionEnd" )) return super.getSelectionEnd(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSelectionEnd_" + jlocale + "_", null ); }
@Override public boolean hasSelection(){ if (!testjnOverride( "hasSelection" )) return super.hasSelection(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "hasSelection_" + jlocale + "_", null ); }
@Override public void setSingleLine(){ if (!testjnOverride( "setSingleLine" )) { super.setSingleLine(); return; } jInterface.Jnido( this, jchildidx + "setSingleLine_" + jlocale + "_", null ); }
@Override public void setSingleLine(boolean arg1) { if (!testjnOverride( "setSingleLine" )) { super.setSingleLine( arg1); return; } jInterface.Jnido( this, jchildidx + "setSingleLine_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setEllipsize(android.text.TextUtils.TruncateAt arg1) { if (!testjnOverride( "setEllipsize" )) { super.setEllipsize( arg1); return; } jInterface.Jnido( this, jchildidx + "setEllipsize_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setMarqueeRepeatLimit(int arg1) { if (!testjnOverride( "setMarqueeRepeatLimit" )) { super.setMarqueeRepeatLimit( arg1); return; } jInterface.Jnido( this, jchildidx + "setMarqueeRepeatLimit_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setSelectAllOnFocus(boolean arg1) { if (!testjnOverride( "setSelectAllOnFocus" )) { super.setSelectAllOnFocus( arg1); return; } jInterface.Jnido( this, jchildidx + "setSelectAllOnFocus_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setCursorVisible(boolean arg1) { if (!testjnOverride( "setCursorVisible" )) { super.setCursorVisible( arg1); return; } jInterface.Jnido( this, jchildidx + "setCursorVisible_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void onTextChanged(java.lang.CharSequence arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "onTextChanged" )) { super.onTextChanged( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "onTextChanged_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override protected void onSelectionChanged(int arg1,int arg2) { if (!testjnOverride( "onSelectionChanged" )) { super.onSelectionChanged( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onSelectionChanged_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void addTextChangedListener(android.text.TextWatcher arg1) { if (!testjnOverride( "addTextChangedListener" )) { super.addTextChangedListener( arg1); return; } jInterface.Jnido( this, jchildidx + "addTextChangedListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void removeTextChangedListener(android.text.TextWatcher arg1) { if (!testjnOverride( "removeTextChangedListener" )) { super.removeTextChangedListener( arg1); return; } jInterface.Jnido( this, jchildidx + "removeTextChangedListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onStartTemporaryDetach(){ if (!testjnOverride( "onStartTemporaryDetach" )) { super.onStartTemporaryDetach(); return; } jInterface.Jnido( this, jchildidx + "onStartTemporaryDetach_" + jlocale + "_", null ); }
@Override public void onFinishTemporaryDetach(){ if (!testjnOverride( "onFinishTemporaryDetach" )) { super.onFinishTemporaryDetach(); return; } jInterface.Jnido( this, jchildidx + "onFinishTemporaryDetach_" + jlocale + "_", null ); }
@Override protected void onFocusChanged(boolean arg1,int arg2,android.graphics.Rect arg3) { if (!testjnOverride( "onFocusChanged" )) { super.onFocusChanged( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "onFocusChanged_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void onWindowFocusChanged(boolean arg1) { if (!testjnOverride( "onWindowFocusChanged" )) { super.onWindowFocusChanged( arg1); return; } jInterface.Jnido( this, jchildidx + "onWindowFocusChanged_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void clearComposingText(){ if (!testjnOverride( "clearComposingText" )) { super.clearComposingText(); return; } jInterface.Jnido( this, jchildidx + "clearComposingText_" + jlocale + "_", null ); }
@Override public void setSelected(boolean arg1) { if (!testjnOverride( "setSelected" )) { super.setSelected( arg1); return; } jInterface.Jnido( this, jchildidx + "setSelected_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean onTouchEvent(android.view.MotionEvent arg1) { if (!testjnOverride( "onTouchEvent" )) return super.onTouchEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onTouchEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean didTouchFocusSelect(){ if (!testjnOverride( "didTouchFocusSelect" )) return super.didTouchFocusSelect(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "didTouchFocusSelect_" + jlocale + "_", null ); }
@Override public void cancelLongPress(){ if (!testjnOverride( "cancelLongPress" )) { super.cancelLongPress(); return; } jInterface.Jnido( this, jchildidx + "cancelLongPress_" + jlocale + "_", null ); }
@Override public boolean onTrackballEvent(android.view.MotionEvent arg1) { if (!testjnOverride( "onTrackballEvent" )) return super.onTrackballEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onTrackballEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setScroller(android.widget.Scroller arg1) { if (!testjnOverride( "setScroller" )) { super.setScroller( arg1); return; } jInterface.Jnido( this, jchildidx + "setScroller_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected float getLeftFadingEdgeStrength(){ if (!testjnOverride( "getLeftFadingEdgeStrength" )) return super.getLeftFadingEdgeStrength(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getLeftFadingEdgeStrength_" + jlocale + "_", null ); }
@Override protected float getRightFadingEdgeStrength(){ if (!testjnOverride( "getRightFadingEdgeStrength" )) return super.getRightFadingEdgeStrength(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getRightFadingEdgeStrength_" + jlocale + "_", null ); }
@Override protected int computeHorizontalScrollRange(){ if (!testjnOverride( "computeHorizontalScrollRange" )) return super.computeHorizontalScrollRange(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "computeHorizontalScrollRange_" + jlocale + "_", null ); }
@Override protected int computeVerticalScrollRange(){ if (!testjnOverride( "computeVerticalScrollRange" )) return super.computeVerticalScrollRange(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "computeVerticalScrollRange_" + jlocale + "_", null ); }
@Override protected int computeVerticalScrollExtent(){ if (!testjnOverride( "computeVerticalScrollExtent" )) return super.computeVerticalScrollExtent(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "computeVerticalScrollExtent_" + jlocale + "_", null ); }
@Override public boolean onKeyShortcut(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyShortcut" )) return super.onKeyShortcut( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyShortcut_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent arg1) { if (!testjnOverride( "dispatchPopulateAccessibilityEvent" )) return super.dispatchPopulateAccessibilityEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "dispatchPopulateAccessibilityEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void onCreateContextMenu(android.view.ContextMenu arg1) { if (!testjnOverride( "onCreateContextMenu" )) { super.onCreateContextMenu( arg1); return; } jInterface.Jnido( this, jchildidx + "onCreateContextMenu_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isInputMethodTarget(){ if (!testjnOverride( "isInputMethodTarget" )) return super.isInputMethodTarget(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isInputMethodTarget_" + jlocale + "_", null ); }
@Override public boolean onTextContextMenuItem(int arg1) { if (!testjnOverride( "onTextContextMenuItem" )) return super.onTextContextMenuItem( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onTextContextMenuItem_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean performLongClick(){ if (!testjnOverride( "performLongClick" )) return super.performLongClick(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "performLongClick_" + jlocale + "_", null ); }
}

package org.dykman.jn.android.widget;
public class PopupWindow extends android.widget.PopupWindow{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public PopupWindow(android.content.Context arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
public PopupWindow(android.content.Context arg1,android.util.AttributeSet arg2, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
public PopupWindow(android.content.Context arg1,android.util.AttributeSet arg2,int arg3, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
public PopupWindow(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
public PopupWindow(android.view.View arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
public PopupWindow(int arg1,int arg2, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
public PopupWindow(android.view.View arg1,int arg2,int arg3, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
public PopupWindow(android.view.View arg1,int arg2,int arg3,boolean arg4, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3, arg4); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void update(){ if (!testjnOverride( "update" )) { super.update(); return; } jInterface.Jnido( this, jchildidx + "update_" + jlocale + "_", null ); }
@Override public void update(int arg1,int arg2) { if (!testjnOverride( "update" )) { super.update( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "update_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void update(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "update" )) { super.update( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "update_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void update(int arg1,int arg2,int arg3,int arg4,boolean arg5) { if (!testjnOverride( "update" )) { super.update( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "update_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void update(android.view.View arg1,int arg2,int arg3) { if (!testjnOverride( "update" )) { super.update( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "update_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void update(android.view.View arg1,int arg2,int arg3,int arg4,int arg5) { if (!testjnOverride( "update" )) { super.update( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "update_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public android.graphics.drawable.Drawable getBackground(){ if (!testjnOverride( "getBackground" )) return super.getBackground(); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getBackground_" + jlocale + "_", null ); }
@Override public void setBackgroundDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "setBackgroundDrawable" )) { super.setBackgroundDrawable( arg1); return; } jInterface.Jnido( this, jchildidx + "setBackgroundDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getAnimationStyle(){ if (!testjnOverride( "getAnimationStyle" )) return super.getAnimationStyle(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getAnimationStyle_" + jlocale + "_", null ); }
@Override public void setIgnoreCheekPress(){ if (!testjnOverride( "setIgnoreCheekPress" )) { super.setIgnoreCheekPress(); return; } jInterface.Jnido( this, jchildidx + "setIgnoreCheekPress_" + jlocale + "_", null ); }
@Override public void setAnimationStyle(int arg1) { if (!testjnOverride( "setAnimationStyle" )) { super.setAnimationStyle( arg1); return; } jInterface.Jnido( this, jchildidx + "setAnimationStyle_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.view.View getContentView(){ if (!testjnOverride( "getContentView" )) return super.getContentView(); return (android.view.View) jInterface.Jnido( this, jchildidx + "getContentView_" + jlocale + "_", null ); }
@Override public void setContentView(android.view.View arg1) { if (!testjnOverride( "setContentView" )) { super.setContentView( arg1); return; } jInterface.Jnido( this, jchildidx + "setContentView_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setTouchInterceptor(android.view.View.OnTouchListener arg1) { if (!testjnOverride( "setTouchInterceptor" )) { super.setTouchInterceptor( arg1); return; } jInterface.Jnido( this, jchildidx + "setTouchInterceptor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isFocusable(){ if (!testjnOverride( "isFocusable" )) return super.isFocusable(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isFocusable_" + jlocale + "_", null ); }
@Override public void setFocusable(boolean arg1) { if (!testjnOverride( "setFocusable" )) { super.setFocusable( arg1); return; } jInterface.Jnido( this, jchildidx + "setFocusable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getInputMethodMode(){ if (!testjnOverride( "getInputMethodMode" )) return super.getInputMethodMode(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getInputMethodMode_" + jlocale + "_", null ); }
@Override public void setInputMethodMode(int arg1) { if (!testjnOverride( "setInputMethodMode" )) { super.setInputMethodMode( arg1); return; } jInterface.Jnido( this, jchildidx + "setInputMethodMode_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setSoftInputMode(int arg1) { if (!testjnOverride( "setSoftInputMode" )) { super.setSoftInputMode( arg1); return; } jInterface.Jnido( this, jchildidx + "setSoftInputMode_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getSoftInputMode(){ if (!testjnOverride( "getSoftInputMode" )) return super.getSoftInputMode(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSoftInputMode_" + jlocale + "_", null ); }
@Override public boolean isTouchable(){ if (!testjnOverride( "isTouchable" )) return super.isTouchable(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isTouchable_" + jlocale + "_", null ); }
@Override public void setTouchable(boolean arg1) { if (!testjnOverride( "setTouchable" )) { super.setTouchable( arg1); return; } jInterface.Jnido( this, jchildidx + "setTouchable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isOutsideTouchable(){ if (!testjnOverride( "isOutsideTouchable" )) return super.isOutsideTouchable(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isOutsideTouchable_" + jlocale + "_", null ); }
@Override public void setOutsideTouchable(boolean arg1) { if (!testjnOverride( "setOutsideTouchable" )) { super.setOutsideTouchable( arg1); return; } jInterface.Jnido( this, jchildidx + "setOutsideTouchable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isClippingEnabled(){ if (!testjnOverride( "isClippingEnabled" )) return super.isClippingEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isClippingEnabled_" + jlocale + "_", null ); }
@Override public void setClippingEnabled(boolean arg1) { if (!testjnOverride( "setClippingEnabled" )) { super.setClippingEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setClippingEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setWindowLayoutMode(int arg1,int arg2) { if (!testjnOverride( "setWindowLayoutMode" )) { super.setWindowLayoutMode( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setWindowLayoutMode_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int getHeight(){ if (!testjnOverride( "getHeight" )) return super.getHeight(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getHeight_" + jlocale + "_", null ); }
@Override public void setHeight(int arg1) { if (!testjnOverride( "setHeight" )) { super.setHeight( arg1); return; } jInterface.Jnido( this, jchildidx + "setHeight_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getWidth(){ if (!testjnOverride( "getWidth" )) return super.getWidth(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getWidth_" + jlocale + "_", null ); }
@Override public void setWidth(int arg1) { if (!testjnOverride( "setWidth" )) { super.setWidth( arg1); return; } jInterface.Jnido( this, jchildidx + "setWidth_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isShowing(){ if (!testjnOverride( "isShowing" )) return super.isShowing(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isShowing_" + jlocale + "_", null ); }
@Override public void showAtLocation(android.view.View arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "showAtLocation" )) { super.showAtLocation( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "showAtLocation_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void showAsDropDown(android.view.View arg1) { if (!testjnOverride( "showAsDropDown" )) { super.showAsDropDown( arg1); return; } jInterface.Jnido( this, jchildidx + "showAsDropDown_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void showAsDropDown(android.view.View arg1,int arg2,int arg3) { if (!testjnOverride( "showAsDropDown" )) { super.showAsDropDown( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "showAsDropDown_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean isAboveAnchor(){ if (!testjnOverride( "isAboveAnchor" )) return super.isAboveAnchor(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isAboveAnchor_" + jlocale + "_", null ); }
@Override public int getMaxAvailableHeight(android.view.View arg1) { if (!testjnOverride( "getMaxAvailableHeight" )) return super.getMaxAvailableHeight( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getMaxAvailableHeight_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getMaxAvailableHeight(android.view.View arg1,int arg2) { if (!testjnOverride( "getMaxAvailableHeight" )) return super.getMaxAvailableHeight( arg1, arg2); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getMaxAvailableHeight_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void dismiss(){ if (!testjnOverride( "dismiss" )) { super.dismiss(); return; } jInterface.Jnido( this, jchildidx + "dismiss_" + jlocale + "_", null ); }
@Override public void setOnDismissListener(android.widget.PopupWindow.OnDismissListener arg1) { if (!testjnOverride( "setOnDismissListener" )) { super.setOnDismissListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnDismissListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
}

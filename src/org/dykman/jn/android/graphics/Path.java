package org.dykman.jn.android.graphics;
public class Path extends android.graphics.Path{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public Path(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
public Path(android.graphics.Path arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void finalize() throws java.lang.Throwable{ if (!testjnOverride( "finalize" )) { super.finalize(); return; } jInterface.Jnido( this, jchildidx + "finalize_" + jlocale + "_", null ); }
@Override public boolean isEmpty(){ if (!testjnOverride( "isEmpty" )) return super.isEmpty(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isEmpty_" + jlocale + "_", null ); }
@Override public void offset(float arg1,float arg2,android.graphics.Path arg3) { if (!testjnOverride( "offset" )) { super.offset( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "offset_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void offset(float arg1,float arg2) { if (!testjnOverride( "offset" )) { super.offset( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "offset_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void transform(android.graphics.Matrix arg1,android.graphics.Path arg2) { if (!testjnOverride( "transform" )) { super.transform( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "transform_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void transform(android.graphics.Matrix arg1) { if (!testjnOverride( "transform" )) { super.transform( arg1); return; } jInterface.Jnido( this, jchildidx + "transform_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void close(){ if (!testjnOverride( "close" )) { super.close(); return; } jInterface.Jnido( this, jchildidx + "close_" + jlocale + "_", null ); }
@Override public void set(android.graphics.Path arg1) { if (!testjnOverride( "set" )) { super.set( arg1); return; } jInterface.Jnido( this, jchildidx + "set_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void reset(){ if (!testjnOverride( "reset" )) { super.reset(); return; } jInterface.Jnido( this, jchildidx + "reset_" + jlocale + "_", null ); }
@Override public void rewind(){ if (!testjnOverride( "rewind" )) { super.rewind(); return; } jInterface.Jnido( this, jchildidx + "rewind_" + jlocale + "_", null ); }
@Override public void setFillType(android.graphics.Path.FillType arg1) { if (!testjnOverride( "setFillType" )) { super.setFillType( arg1); return; } jInterface.Jnido( this, jchildidx + "setFillType_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isInverseFillType(){ if (!testjnOverride( "isInverseFillType" )) return super.isInverseFillType(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isInverseFillType_" + jlocale + "_", null ); }
@Override public void toggleInverseFillType(){ if (!testjnOverride( "toggleInverseFillType" )) { super.toggleInverseFillType(); return; } jInterface.Jnido( this, jchildidx + "toggleInverseFillType_" + jlocale + "_", null ); }
@Override public boolean isRect(android.graphics.RectF arg1) { if (!testjnOverride( "isRect" )) return super.isRect( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isRect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void computeBounds(android.graphics.RectF arg1,boolean arg2) { if (!testjnOverride( "computeBounds" )) { super.computeBounds( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "computeBounds_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void incReserve(int arg1) { if (!testjnOverride( "incReserve" )) { super.incReserve( arg1); return; } jInterface.Jnido( this, jchildidx + "incReserve_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void moveTo(float arg1,float arg2) { if (!testjnOverride( "moveTo" )) { super.moveTo( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "moveTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void rMoveTo(float arg1,float arg2) { if (!testjnOverride( "rMoveTo" )) { super.rMoveTo( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "rMoveTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void lineTo(float arg1,float arg2) { if (!testjnOverride( "lineTo" )) { super.lineTo( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "lineTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void rLineTo(float arg1,float arg2) { if (!testjnOverride( "rLineTo" )) { super.rLineTo( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "rLineTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void quadTo(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "quadTo" )) { super.quadTo( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "quadTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void rQuadTo(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "rQuadTo" )) { super.rQuadTo( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "rQuadTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void cubicTo(float arg1,float arg2,float arg3,float arg4,float arg5,float arg6) { if (!testjnOverride( "cubicTo" )) { super.cubicTo( arg1, arg2, arg3, arg4, arg5, arg6); return; } jInterface.Jnido( this, jchildidx + "cubicTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override public void rCubicTo(float arg1,float arg2,float arg3,float arg4,float arg5,float arg6) { if (!testjnOverride( "rCubicTo" )) { super.rCubicTo( arg1, arg2, arg3, arg4, arg5, arg6); return; } jInterface.Jnido( this, jchildidx + "rCubicTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override public void arcTo(android.graphics.RectF arg1,float arg2,float arg3,boolean arg4) { if (!testjnOverride( "arcTo" )) { super.arcTo( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "arcTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void arcTo(android.graphics.RectF arg1,float arg2,float arg3) { if (!testjnOverride( "arcTo" )) { super.arcTo( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "arcTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void addRect(android.graphics.RectF arg1,android.graphics.Path.Direction arg2) { if (!testjnOverride( "addRect" )) { super.addRect( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "addRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void addRect(float arg1,float arg2,float arg3,float arg4,android.graphics.Path.Direction arg5) { if (!testjnOverride( "addRect" )) { super.addRect( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "addRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void addOval(android.graphics.RectF arg1,android.graphics.Path.Direction arg2) { if (!testjnOverride( "addOval" )) { super.addOval( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "addOval_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void addCircle(float arg1,float arg2,float arg3,android.graphics.Path.Direction arg4) { if (!testjnOverride( "addCircle" )) { super.addCircle( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "addCircle_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void addArc(android.graphics.RectF arg1,float arg2,float arg3) { if (!testjnOverride( "addArc" )) { super.addArc( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "addArc_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void addRoundRect(android.graphics.RectF arg1,float arg2,float arg3,android.graphics.Path.Direction arg4) { if (!testjnOverride( "addRoundRect" )) { super.addRoundRect( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "addRoundRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void addRoundRect(android.graphics.RectF arg1,float[] arg2,android.graphics.Path.Direction arg3) { if (!testjnOverride( "addRoundRect" )) { super.addRoundRect( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "addRoundRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void addPath(android.graphics.Path arg1,float arg2,float arg3) { if (!testjnOverride( "addPath" )) { super.addPath( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "addPath_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void addPath(android.graphics.Path arg1) { if (!testjnOverride( "addPath" )) { super.addPath( arg1); return; } jInterface.Jnido( this, jchildidx + "addPath_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void addPath(android.graphics.Path arg1,android.graphics.Matrix arg2) { if (!testjnOverride( "addPath" )) { super.addPath( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "addPath_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setLastPoint(float arg1,float arg2) { if (!testjnOverride( "setLastPoint" )) { super.setLastPoint( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setLastPoint_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
}

package org.dykman.jn.android.graphics;
public class Canvas extends android.graphics.Canvas{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public Canvas(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
public Canvas(android.graphics.Bitmap arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
// public Canvas(javax.microedition.khronos.opengles.GL arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void finalize() throws java.lang.Throwable{ if (!testjnOverride( "finalize" )) { super.finalize(); return; } jInterface.Jnido( this, jchildidx + "finalize_" + jlocale + "_", null ); }
@Override public void concat(android.graphics.Matrix arg1) { if (!testjnOverride( "concat" )) { super.concat( arg1); return; } jInterface.Jnido( this, jchildidx + "concat_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int save(){ if (!testjnOverride( "save" )) return super.save(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "save_" + jlocale + "_", null ); }
@Override public int save(int arg1) { if (!testjnOverride( "save" )) return super.save( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "save_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void rotate(float arg1) { if (!testjnOverride( "rotate" )) { super.rotate( arg1); return; } jInterface.Jnido( this, jchildidx + "rotate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void scale(float arg1,float arg2) { if (!testjnOverride( "scale" )) { super.scale( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "scale_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean isOpaque(){ if (!testjnOverride( "isOpaque" )) return super.isOpaque(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isOpaque_" + jlocale + "_", null ); }
@Override public void setBitmap(android.graphics.Bitmap arg1) { if (!testjnOverride( "setBitmap" )) { super.setBitmap( arg1); return; } jInterface.Jnido( this, jchildidx + "setBitmap_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getWidth(){ if (!testjnOverride( "getWidth" )) return super.getWidth(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getWidth_" + jlocale + "_", null ); }
@Override public int getHeight(){ if (!testjnOverride( "getHeight" )) return super.getHeight(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getHeight_" + jlocale + "_", null ); }
@Override public int getDensity(){ if (!testjnOverride( "getDensity" )) return super.getDensity(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getDensity_" + jlocale + "_", null ); }
@Override public void setDensity(int arg1) { if (!testjnOverride( "setDensity" )) { super.setDensity( arg1); return; } jInterface.Jnido( this, jchildidx + "setDensity_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int saveLayer(android.graphics.RectF arg1,android.graphics.Paint arg2,int arg3) { if (!testjnOverride( "saveLayer" )) return super.saveLayer( arg1, arg2, arg3); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "saveLayer_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int saveLayer(float arg1,float arg2,float arg3,float arg4,android.graphics.Paint arg5,int arg6) { if (!testjnOverride( "saveLayer" )) return super.saveLayer( arg1, arg2, arg3, arg4, arg5, arg6); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "saveLayer_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override public int saveLayerAlpha(android.graphics.RectF arg1,int arg2,int arg3) { if (!testjnOverride( "saveLayerAlpha" )) return super.saveLayerAlpha( arg1, arg2, arg3); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "saveLayerAlpha_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int saveLayerAlpha(float arg1,float arg2,float arg3,float arg4,int arg5,int arg6) { if (!testjnOverride( "saveLayerAlpha" )) return super.saveLayerAlpha( arg1, arg2, arg3, arg4, arg5, arg6); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "saveLayerAlpha_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override public void restore(){ if (!testjnOverride( "restore" )) { super.restore(); return; } jInterface.Jnido( this, jchildidx + "restore_" + jlocale + "_", null ); }
@Override public int getSaveCount(){ if (!testjnOverride( "getSaveCount" )) return super.getSaveCount(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSaveCount_" + jlocale + "_", null ); }
@Override public void restoreToCount(int arg1) { if (!testjnOverride( "restoreToCount" )) { super.restoreToCount( arg1); return; } jInterface.Jnido( this, jchildidx + "restoreToCount_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void translate(float arg1,float arg2) { if (!testjnOverride( "translate" )) { super.translate( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "translate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void skew(float arg1,float arg2) { if (!testjnOverride( "skew" )) { super.skew( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "skew_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setMatrix(android.graphics.Matrix arg1) { if (!testjnOverride( "setMatrix" )) { super.setMatrix( arg1); return; } jInterface.Jnido( this, jchildidx + "setMatrix_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void getMatrix(android.graphics.Matrix arg1) { if (!testjnOverride( "getMatrix" )) { super.getMatrix( arg1); return; } jInterface.Jnido( this, jchildidx + "getMatrix_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean clipRect(android.graphics.RectF arg1,android.graphics.Region.Op arg2) { if (!testjnOverride( "clipRect" )) return super.clipRect( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean clipRect(android.graphics.Rect arg1,android.graphics.Region.Op arg2) { if (!testjnOverride( "clipRect" )) return super.clipRect( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean clipRect(android.graphics.RectF arg1) { if (!testjnOverride( "clipRect" )) return super.clipRect( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipRect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean clipRect(android.graphics.Rect arg1) { if (!testjnOverride( "clipRect" )) return super.clipRect( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipRect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean clipRect(float arg1,float arg2,float arg3,float arg4,android.graphics.Region.Op arg5) { if (!testjnOverride( "clipRect" )) return super.clipRect( arg1, arg2, arg3, arg4, arg5); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public boolean clipRect(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "clipRect" )) return super.clipRect( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public boolean clipRect(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "clipRect" )) return super.clipRect( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public boolean clipPath(android.graphics.Path arg1,android.graphics.Region.Op arg2) { if (!testjnOverride( "clipPath" )) return super.clipPath( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipPath_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean clipPath(android.graphics.Path arg1) { if (!testjnOverride( "clipPath" )) return super.clipPath( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipPath_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean clipRegion(android.graphics.Region arg1,android.graphics.Region.Op arg2) { if (!testjnOverride( "clipRegion" )) return super.clipRegion( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipRegion_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean clipRegion(android.graphics.Region arg1) { if (!testjnOverride( "clipRegion" )) return super.clipRegion( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clipRegion_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.DrawFilter getDrawFilter(){ if (!testjnOverride( "getDrawFilter" )) return super.getDrawFilter(); return (android.graphics.DrawFilter) jInterface.Jnido( this, jchildidx + "getDrawFilter_" + jlocale + "_", null ); }
@Override public void setDrawFilter(android.graphics.DrawFilter arg1) { if (!testjnOverride( "setDrawFilter" )) { super.setDrawFilter( arg1); return; } jInterface.Jnido( this, jchildidx + "setDrawFilter_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean quickReject(android.graphics.RectF arg1,android.graphics.Canvas.EdgeType arg2) { if (!testjnOverride( "quickReject" )) return super.quickReject( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "quickReject_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean quickReject(android.graphics.Path arg1,android.graphics.Canvas.EdgeType arg2) { if (!testjnOverride( "quickReject" )) return super.quickReject( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "quickReject_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean quickReject(float arg1,float arg2,float arg3,float arg4,android.graphics.Canvas.EdgeType arg5) { if (!testjnOverride( "quickReject" )) return super.quickReject( arg1, arg2, arg3, arg4, arg5); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "quickReject_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public boolean getClipBounds(android.graphics.Rect arg1) { if (!testjnOverride( "getClipBounds" )) return super.getClipBounds( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "getClipBounds_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void drawRGB(int arg1,int arg2,int arg3) { if (!testjnOverride( "drawRGB" )) { super.drawRGB( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "drawRGB_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void drawARGB(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "drawARGB" )) { super.drawARGB( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "drawARGB_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void drawColor(int arg1) { if (!testjnOverride( "drawColor" )) { super.drawColor( arg1); return; } jInterface.Jnido( this, jchildidx + "drawColor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void drawColor(int arg1,android.graphics.PorterDuff.Mode arg2) { if (!testjnOverride( "drawColor" )) { super.drawColor( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "drawColor_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void drawPaint(android.graphics.Paint arg1) { if (!testjnOverride( "drawPaint" )) { super.drawPaint( arg1); return; } jInterface.Jnido( this, jchildidx + "drawPaint_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void drawPoints(float[] arg1,int arg2,int arg3,android.graphics.Paint arg4) { if (!testjnOverride( "drawPoints" )) { super.drawPoints( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "drawPoints_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void drawPoints(float[] arg1,android.graphics.Paint arg2) { if (!testjnOverride( "drawPoints" )) { super.drawPoints( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "drawPoints_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void drawPoint(float arg1,float arg2,android.graphics.Paint arg3) { if (!testjnOverride( "drawPoint" )) { super.drawPoint( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "drawPoint_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void drawLine(float arg1,float arg2,float arg3,float arg4,android.graphics.Paint arg5) { if (!testjnOverride( "drawLine" )) { super.drawLine( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "drawLine_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void drawLines(float[] arg1,int arg2,int arg3,android.graphics.Paint arg4) { if (!testjnOverride( "drawLines" )) { super.drawLines( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "drawLines_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void drawLines(float[] arg1,android.graphics.Paint arg2) { if (!testjnOverride( "drawLines" )) { super.drawLines( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "drawLines_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void drawRect(android.graphics.RectF arg1,android.graphics.Paint arg2) { if (!testjnOverride( "drawRect" )) { super.drawRect( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "drawRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void drawRect(android.graphics.Rect arg1,android.graphics.Paint arg2) { if (!testjnOverride( "drawRect" )) { super.drawRect( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "drawRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void drawRect(float arg1,float arg2,float arg3,float arg4,android.graphics.Paint arg5) { if (!testjnOverride( "drawRect" )) { super.drawRect( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "drawRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void drawOval(android.graphics.RectF arg1,android.graphics.Paint arg2) { if (!testjnOverride( "drawOval" )) { super.drawOval( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "drawOval_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void drawCircle(float arg1,float arg2,float arg3,android.graphics.Paint arg4) { if (!testjnOverride( "drawCircle" )) { super.drawCircle( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "drawCircle_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void drawArc(android.graphics.RectF arg1,float arg2,float arg3,boolean arg4,android.graphics.Paint arg5) { if (!testjnOverride( "drawArc" )) { super.drawArc( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "drawArc_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void drawRoundRect(android.graphics.RectF arg1,float arg2,float arg3,android.graphics.Paint arg4) { if (!testjnOverride( "drawRoundRect" )) { super.drawRoundRect( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "drawRoundRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void drawPath(android.graphics.Path arg1,android.graphics.Paint arg2) { if (!testjnOverride( "drawPath" )) { super.drawPath( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "drawPath_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void drawBitmap(android.graphics.Bitmap arg1,float arg2,float arg3,android.graphics.Paint arg4) { if (!testjnOverride( "drawBitmap" )) { super.drawBitmap( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "drawBitmap_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void drawBitmap(android.graphics.Bitmap arg1,android.graphics.Rect arg2,android.graphics.RectF arg3,android.graphics.Paint arg4) { if (!testjnOverride( "drawBitmap" )) { super.drawBitmap( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "drawBitmap_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void drawBitmap(android.graphics.Bitmap arg1,android.graphics.Rect arg2,android.graphics.Rect arg3,android.graphics.Paint arg4) { if (!testjnOverride( "drawBitmap" )) { super.drawBitmap( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "drawBitmap_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void drawBitmap(int[] arg1,int arg2,int arg3,float arg4,float arg5,int arg6,int arg7,boolean arg8,android.graphics.Paint arg9) { if (!testjnOverride( "drawBitmap" )) { super.drawBitmap( arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); return; } jInterface.Jnido( this, jchildidx + "drawBitmap_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 } ); }
@Override public void drawBitmap(int[] arg1,int arg2,int arg3,int arg4,int arg5,int arg6,int arg7,boolean arg8,android.graphics.Paint arg9) { if (!testjnOverride( "drawBitmap" )) { super.drawBitmap( arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); return; } jInterface.Jnido( this, jchildidx + "drawBitmap_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 } ); }
@Override public void drawBitmap(android.graphics.Bitmap arg1,android.graphics.Matrix arg2,android.graphics.Paint arg3) { if (!testjnOverride( "drawBitmap" )) { super.drawBitmap( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "drawBitmap_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void drawBitmapMesh(android.graphics.Bitmap arg1,int arg2,int arg3,float[] arg4,int arg5,int[] arg6,int arg7,android.graphics.Paint arg8) { if (!testjnOverride( "drawBitmapMesh" )) { super.drawBitmapMesh( arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); return; } jInterface.Jnido( this, jchildidx + "drawBitmapMesh_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 } ); }
@Override public void drawVertices(android.graphics.Canvas.VertexMode arg1,int arg2,float[] arg3,int arg4,float[] arg5,int arg6,int[] arg7,int arg8,short[] arg9,int arg10,int arg11,android.graphics.Paint arg12) { if (!testjnOverride( "drawVertices" )) { super.drawVertices( arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12); return; } jInterface.Jnido( this, jchildidx + "drawVertices_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12 } ); }
@Override public void drawText(char[] arg1,int arg2,int arg3,float arg4,float arg5,android.graphics.Paint arg6) { if (!testjnOverride( "drawText" )) { super.drawText( arg1, arg2, arg3, arg4, arg5, arg6); return; } jInterface.Jnido( this, jchildidx + "drawText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override public void drawText(java.lang.String arg1,float arg2,float arg3,android.graphics.Paint arg4) { if (!testjnOverride( "drawText" )) { super.drawText( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "drawText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void drawText(java.lang.String arg1,int arg2,int arg3,float arg4,float arg5,android.graphics.Paint arg6) { if (!testjnOverride( "drawText" )) { super.drawText( arg1, arg2, arg3, arg4, arg5, arg6); return; } jInterface.Jnido( this, jchildidx + "drawText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override public void drawText(java.lang.CharSequence arg1,int arg2,int arg3,float arg4,float arg5,android.graphics.Paint arg6) { if (!testjnOverride( "drawText" )) { super.drawText( arg1, arg2, arg3, arg4, arg5, arg6); return; } jInterface.Jnido( this, jchildidx + "drawText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override public void drawPosText(char[] arg1,int arg2,int arg3,float[] arg4,android.graphics.Paint arg5) { if (!testjnOverride( "drawPosText" )) { super.drawPosText( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "drawPosText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void drawPosText(java.lang.String arg1,float[] arg2,android.graphics.Paint arg3) { if (!testjnOverride( "drawPosText" )) { super.drawPosText( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "drawPosText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void drawTextOnPath(char[] arg1,int arg2,int arg3,android.graphics.Path arg4,float arg5,float arg6,android.graphics.Paint arg7) { if (!testjnOverride( "drawTextOnPath" )) { super.drawTextOnPath( arg1, arg2, arg3, arg4, arg5, arg6, arg7); return; } jInterface.Jnido( this, jchildidx + "drawTextOnPath_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7 } ); }
@Override public void drawTextOnPath(java.lang.String arg1,android.graphics.Path arg2,float arg3,float arg4,android.graphics.Paint arg5) { if (!testjnOverride( "drawTextOnPath" )) { super.drawTextOnPath( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "drawTextOnPath_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void drawPicture(android.graphics.Picture arg1) { if (!testjnOverride( "drawPicture" )) { super.drawPicture( arg1); return; } jInterface.Jnido( this, jchildidx + "drawPicture_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void drawPicture(android.graphics.Picture arg1,android.graphics.RectF arg2) { if (!testjnOverride( "drawPicture" )) { super.drawPicture( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "drawPicture_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void drawPicture(android.graphics.Picture arg1,android.graphics.Rect arg2) { if (!testjnOverride( "drawPicture" )) { super.drawPicture( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "drawPicture_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
}

package org.dykman.jn.android.graphics;
public class Matrix extends android.graphics.Matrix{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public Matrix(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
public Matrix(android.graphics.Matrix arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void finalize() throws java.lang.Throwable{ if (!testjnOverride( "finalize" )) { super.finalize(); return; } jInterface.Jnido( this, jchildidx + "finalize_" + jlocale + "_", null ); }
@Override public boolean equals(java.lang.Object arg1) { if (!testjnOverride( "equals" )) return super.equals( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "equals_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String toString(){ if (!testjnOverride( "toString" )) return super.toString(); return (java.lang.String) jInterface.Jnido( this, jchildidx + "toString_" + jlocale + "_", null ); }
@Override public void set(android.graphics.Matrix arg1) { if (!testjnOverride( "set" )) { super.set( arg1); return; } jInterface.Jnido( this, jchildidx + "set_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void reset(){ if (!testjnOverride( "reset" )) { super.reset(); return; } jInterface.Jnido( this, jchildidx + "reset_" + jlocale + "_", null ); }
@Override public boolean isIdentity(){ if (!testjnOverride( "isIdentity" )) return super.isIdentity(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isIdentity_" + jlocale + "_", null ); }
@Override public boolean rectStaysRect(){ if (!testjnOverride( "rectStaysRect" )) return super.rectStaysRect(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "rectStaysRect_" + jlocale + "_", null ); }
@Override public void setTranslate(float arg1,float arg2) { if (!testjnOverride( "setTranslate" )) { super.setTranslate( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setTranslate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setScale(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "setScale" )) { super.setScale( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "setScale_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void setScale(float arg1,float arg2) { if (!testjnOverride( "setScale" )) { super.setScale( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setScale_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setRotate(float arg1,float arg2,float arg3) { if (!testjnOverride( "setRotate" )) { super.setRotate( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "setRotate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void setRotate(float arg1) { if (!testjnOverride( "setRotate" )) { super.setRotate( arg1); return; } jInterface.Jnido( this, jchildidx + "setRotate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setSinCos(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "setSinCos" )) { super.setSinCos( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "setSinCos_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void setSinCos(float arg1,float arg2) { if (!testjnOverride( "setSinCos" )) { super.setSinCos( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setSinCos_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setSkew(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "setSkew" )) { super.setSkew( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "setSkew_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void setSkew(float arg1,float arg2) { if (!testjnOverride( "setSkew" )) { super.setSkew( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setSkew_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean setConcat(android.graphics.Matrix arg1,android.graphics.Matrix arg2) { if (!testjnOverride( "setConcat" )) return super.setConcat( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "setConcat_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean preTranslate(float arg1,float arg2) { if (!testjnOverride( "preTranslate" )) return super.preTranslate( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "preTranslate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean preScale(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "preScale" )) return super.preScale( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "preScale_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public boolean preScale(float arg1,float arg2) { if (!testjnOverride( "preScale" )) return super.preScale( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "preScale_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean preRotate(float arg1,float arg2,float arg3) { if (!testjnOverride( "preRotate" )) return super.preRotate( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "preRotate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean preRotate(float arg1) { if (!testjnOverride( "preRotate" )) return super.preRotate( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "preRotate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean preSkew(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "preSkew" )) return super.preSkew( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "preSkew_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public boolean preSkew(float arg1,float arg2) { if (!testjnOverride( "preSkew" )) return super.preSkew( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "preSkew_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean preConcat(android.graphics.Matrix arg1) { if (!testjnOverride( "preConcat" )) return super.preConcat( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "preConcat_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean postTranslate(float arg1,float arg2) { if (!testjnOverride( "postTranslate" )) return super.postTranslate( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "postTranslate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean postScale(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "postScale" )) return super.postScale( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "postScale_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public boolean postScale(float arg1,float arg2) { if (!testjnOverride( "postScale" )) return super.postScale( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "postScale_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean postRotate(float arg1,float arg2,float arg3) { if (!testjnOverride( "postRotate" )) return super.postRotate( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "postRotate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean postRotate(float arg1) { if (!testjnOverride( "postRotate" )) return super.postRotate( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "postRotate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean postSkew(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "postSkew" )) return super.postSkew( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "postSkew_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public boolean postSkew(float arg1,float arg2) { if (!testjnOverride( "postSkew" )) return super.postSkew( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "postSkew_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean postConcat(android.graphics.Matrix arg1) { if (!testjnOverride( "postConcat" )) return super.postConcat( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "postConcat_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean setRectToRect(android.graphics.RectF arg1,android.graphics.RectF arg2,android.graphics.Matrix.ScaleToFit arg3) { if (!testjnOverride( "setRectToRect" )) return super.setRectToRect( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "setRectToRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean setPolyToPoly(float[] arg1,int arg2,float[] arg3,int arg4,int arg5) { if (!testjnOverride( "setPolyToPoly" )) return super.setPolyToPoly( arg1, arg2, arg3, arg4, arg5); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "setPolyToPoly_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public boolean invert(android.graphics.Matrix arg1) { if (!testjnOverride( "invert" )) return super.invert( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "invert_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void mapPoints(float[] arg1,int arg2,float[] arg3,int arg4,int arg5) { if (!testjnOverride( "mapPoints" )) { super.mapPoints( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "mapPoints_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void mapPoints(float[] arg1,float[] arg2) { if (!testjnOverride( "mapPoints" )) { super.mapPoints( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "mapPoints_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void mapPoints(float[] arg1) { if (!testjnOverride( "mapPoints" )) { super.mapPoints( arg1); return; } jInterface.Jnido( this, jchildidx + "mapPoints_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void mapVectors(float[] arg1,int arg2,float[] arg3,int arg4,int arg5) { if (!testjnOverride( "mapVectors" )) { super.mapVectors( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "mapVectors_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void mapVectors(float[] arg1,float[] arg2) { if (!testjnOverride( "mapVectors" )) { super.mapVectors( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "mapVectors_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void mapVectors(float[] arg1) { if (!testjnOverride( "mapVectors" )) { super.mapVectors( arg1); return; } jInterface.Jnido( this, jchildidx + "mapVectors_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean mapRect(android.graphics.RectF arg1,android.graphics.RectF arg2) { if (!testjnOverride( "mapRect" )) return super.mapRect( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "mapRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean mapRect(android.graphics.RectF arg1) { if (!testjnOverride( "mapRect" )) return super.mapRect( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "mapRect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public float mapRadius(float arg1) { if (!testjnOverride( "mapRadius" )) return super.mapRadius( arg1); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "mapRadius_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void getValues(float[] arg1) { if (!testjnOverride( "getValues" )) { super.getValues( arg1); return; } jInterface.Jnido( this, jchildidx + "getValues_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setValues(float[] arg1) { if (!testjnOverride( "setValues" )) { super.setValues( arg1); return; } jInterface.Jnido( this, jchildidx + "setValues_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String toShortString(){ if (!testjnOverride( "toShortString" )) return super.toShortString(); return (java.lang.String) jInterface.Jnido( this, jchildidx + "toShortString_" + jlocale + "_", null ); }
}

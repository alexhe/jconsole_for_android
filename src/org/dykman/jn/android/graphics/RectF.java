package org.dykman.jn.android.graphics;
public class RectF extends android.graphics.RectF{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public RectF(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
public RectF(float arg1,float arg2,float arg3,float arg4, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3, arg4); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
public RectF(android.graphics.RectF arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
public RectF(android.graphics.Rect arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String toString(){ if (!testjnOverride( "toString" )) return super.toString(); return (java.lang.String) jInterface.Jnido( this, jchildidx + "toString_" + jlocale + "_", null ); }
@Override public boolean contains(float arg1,float arg2) { if (!testjnOverride( "contains" )) return super.contains( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "contains_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean contains(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "contains" )) return super.contains( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "contains_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public boolean contains(android.graphics.RectF arg1) { if (!testjnOverride( "contains" )) return super.contains( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "contains_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void offset(float arg1,float arg2) { if (!testjnOverride( "offset" )) { super.offset( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "offset_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void set(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "set" )) { super.set( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "set_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void set(android.graphics.RectF arg1) { if (!testjnOverride( "set" )) { super.set( arg1); return; } jInterface.Jnido( this, jchildidx + "set_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void set(android.graphics.Rect arg1) { if (!testjnOverride( "set" )) { super.set( arg1); return; } jInterface.Jnido( this, jchildidx + "set_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void sort(){ if (!testjnOverride( "sort" )) { super.sort(); return; } jInterface.Jnido( this, jchildidx + "sort_" + jlocale + "_", null ); }
@Override public void round(android.graphics.Rect arg1) { if (!testjnOverride( "round" )) { super.round( arg1); return; } jInterface.Jnido( this, jchildidx + "round_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean intersects(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "intersects" )) return super.intersects( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "intersects_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void setEmpty(){ if (!testjnOverride( "setEmpty" )) { super.setEmpty(); return; } jInterface.Jnido( this, jchildidx + "setEmpty_" + jlocale + "_", null ); }
@Override public void offsetTo(float arg1,float arg2) { if (!testjnOverride( "offsetTo" )) { super.offsetTo( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "offsetTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void inset(float arg1,float arg2) { if (!testjnOverride( "inset" )) { super.inset( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "inset_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean intersect(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "intersect" )) return super.intersect( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "intersect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public boolean intersect(android.graphics.RectF arg1) { if (!testjnOverride( "intersect" )) return super.intersect( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "intersect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean setIntersect(android.graphics.RectF arg1,android.graphics.RectF arg2) { if (!testjnOverride( "setIntersect" )) return super.setIntersect( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "setIntersect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void roundOut(android.graphics.Rect arg1) { if (!testjnOverride( "roundOut" )) { super.roundOut( arg1); return; } jInterface.Jnido( this, jchildidx + "roundOut_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void union(float arg1,float arg2,float arg3,float arg4) { if (!testjnOverride( "union" )) { super.union( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "union_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void union(android.graphics.RectF arg1) { if (!testjnOverride( "union" )) { super.union( arg1); return; } jInterface.Jnido( this, jchildidx + "union_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void union(float arg1,float arg2) { if (!testjnOverride( "union" )) { super.union( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "union_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int describeContents(){ if (!testjnOverride( "describeContents" )) return super.describeContents(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "describeContents_" + jlocale + "_", null ); }
@Override public void writeToParcel(android.os.Parcel arg1,int arg2) { if (!testjnOverride( "writeToParcel" )) { super.writeToParcel( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "writeToParcel_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void readFromParcel(android.os.Parcel arg1) { if (!testjnOverride( "readFromParcel" )) { super.readFromParcel( arg1); return; } jInterface.Jnido( this, jchildidx + "readFromParcel_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
}

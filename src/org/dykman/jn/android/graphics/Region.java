package org.dykman.jn.android.graphics;
public class Region extends android.graphics.Region{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public Region(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
public Region(android.graphics.Region arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
public Region(android.graphics.Rect arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
public Region(int arg1,int arg2,int arg3,int arg4, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3, arg4); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override protected void finalize() throws java.lang.Throwable{ if (!testjnOverride( "finalize" )) { super.finalize(); return; } jInterface.Jnido( this, jchildidx + "finalize_" + jlocale + "_", null ); }
@Override public boolean equals(java.lang.Object arg1) { if (!testjnOverride( "equals" )) return super.equals( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "equals_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean contains(int arg1,int arg2) { if (!testjnOverride( "contains" )) return super.contains( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "contains_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean isEmpty(){ if (!testjnOverride( "isEmpty" )) return super.isEmpty(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isEmpty_" + jlocale + "_", null ); }
@Override public boolean set(android.graphics.Region arg1) { if (!testjnOverride( "set" )) return super.set( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "set_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean set(android.graphics.Rect arg1) { if (!testjnOverride( "set" )) return super.set( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "set_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean set(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "set" )) return super.set( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "set_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void setEmpty(){ if (!testjnOverride( "setEmpty" )) { super.setEmpty(); return; } jInterface.Jnido( this, jchildidx + "setEmpty_" + jlocale + "_", null ); }
@Override public boolean setPath(android.graphics.Path arg1,android.graphics.Region arg2) { if (!testjnOverride( "setPath" )) return super.setPath( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "setPath_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean isRect(){ if (!testjnOverride( "isRect" )) return super.isRect(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isRect_" + jlocale + "_", null ); }
@Override public boolean isComplex(){ if (!testjnOverride( "isComplex" )) return super.isComplex(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isComplex_" + jlocale + "_", null ); }
@Override public android.graphics.Rect getBounds(){ if (!testjnOverride( "getBounds" )) return super.getBounds(); return (android.graphics.Rect) jInterface.Jnido( this, jchildidx + "getBounds_" + jlocale + "_", null ); }
@Override public boolean getBounds(android.graphics.Rect arg1) { if (!testjnOverride( "getBounds" )) return super.getBounds( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "getBounds_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.Path getBoundaryPath(){ if (!testjnOverride( "getBoundaryPath" )) return super.getBoundaryPath(); return (android.graphics.Path) jInterface.Jnido( this, jchildidx + "getBoundaryPath_" + jlocale + "_", null ); }
@Override public boolean getBoundaryPath(android.graphics.Path arg1) { if (!testjnOverride( "getBoundaryPath" )) return super.getBoundaryPath( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "getBoundaryPath_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean quickContains(android.graphics.Rect arg1) { if (!testjnOverride( "quickContains" )) return super.quickContains( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "quickContains_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean quickContains(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "quickContains" )) return super.quickContains( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "quickContains_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public boolean quickReject(android.graphics.Rect arg1) { if (!testjnOverride( "quickReject" )) return super.quickReject( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "quickReject_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean quickReject(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "quickReject" )) return super.quickReject( arg1, arg2, arg3, arg4); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "quickReject_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public boolean quickReject(android.graphics.Region arg1) { if (!testjnOverride( "quickReject" )) return super.quickReject( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "quickReject_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void translate(int arg1,int arg2) { if (!testjnOverride( "translate" )) { super.translate( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "translate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void translate(int arg1,int arg2,android.graphics.Region arg3) { if (!testjnOverride( "translate" )) { super.translate( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "translate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean op(android.graphics.Rect arg1,android.graphics.Region.Op arg2) { if (!testjnOverride( "op" )) return super.op( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "op_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean op(int arg1,int arg2,int arg3,int arg4,android.graphics.Region.Op arg5) { if (!testjnOverride( "op" )) return super.op( arg1, arg2, arg3, arg4, arg5); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "op_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public boolean op(android.graphics.Region arg1,android.graphics.Region.Op arg2) { if (!testjnOverride( "op" )) return super.op( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "op_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean op(android.graphics.Rect arg1,android.graphics.Region arg2,android.graphics.Region.Op arg3) { if (!testjnOverride( "op" )) return super.op( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "op_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean op(android.graphics.Region arg1,android.graphics.Region arg2,android.graphics.Region.Op arg3) { if (!testjnOverride( "op" )) return super.op( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "op_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int describeContents(){ if (!testjnOverride( "describeContents" )) return super.describeContents(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "describeContents_" + jlocale + "_", null ); }
@Override public void writeToParcel(android.os.Parcel arg1,int arg2) { if (!testjnOverride( "writeToParcel" )) { super.writeToParcel( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "writeToParcel_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
}

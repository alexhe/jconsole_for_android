package org.dykman.jn.android.database.sqlite;
public class SQLiteQueryBuilder extends android.database.sqlite.SQLiteQueryBuilder{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public SQLiteQueryBuilder(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
@Override public android.database.Cursor query(android.database.sqlite.SQLiteDatabase arg1,java.lang.String[] arg2,java.lang.String arg3,java.lang.String[] arg4,java.lang.String arg5,java.lang.String arg6,java.lang.String arg7) { if (!testjnOverride( "query" )) return super.query( arg1, arg2, arg3, arg4, arg5, arg6, arg7); return (android.database.Cursor) jInterface.Jnido( this, jchildidx + "query_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7 } ); }
@Override public android.database.Cursor query(android.database.sqlite.SQLiteDatabase arg1,java.lang.String[] arg2,java.lang.String arg3,java.lang.String[] arg4,java.lang.String arg5,java.lang.String arg6,java.lang.String arg7,java.lang.String arg8) { if (!testjnOverride( "query" )) return super.query( arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8); return (android.database.Cursor) jInterface.Jnido( this, jchildidx + "query_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 } ); }
@Override public void setDistinct(boolean arg1) { if (!testjnOverride( "setDistinct" )) { super.setDistinct( arg1); return; } jInterface.Jnido( this, jchildidx + "setDistinct_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String getTables(){ if (!testjnOverride( "getTables" )) return super.getTables(); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getTables_" + jlocale + "_", null ); }
@Override public void setTables(java.lang.String arg1) { if (!testjnOverride( "setTables" )) { super.setTables( arg1); return; } jInterface.Jnido( this, jchildidx + "setTables_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void appendWhere(java.lang.CharSequence arg1) { if (!testjnOverride( "appendWhere" )) { super.appendWhere( arg1); return; } jInterface.Jnido( this, jchildidx + "appendWhere_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void appendWhereEscapeString(java.lang.String arg1) { if (!testjnOverride( "appendWhereEscapeString" )) { super.appendWhereEscapeString( arg1); return; } jInterface.Jnido( this, jchildidx + "appendWhereEscapeString_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setProjectionMap(java.util.Map arg1) { if (!testjnOverride( "setProjectionMap" )) { super.setProjectionMap( arg1); return; } jInterface.Jnido( this, jchildidx + "setProjectionMap_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setCursorFactory(android.database.sqlite.SQLiteDatabase.CursorFactory arg1) { if (!testjnOverride( "setCursorFactory" )) { super.setCursorFactory( arg1); return; } jInterface.Jnido( this, jchildidx + "setCursorFactory_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String buildQuery(java.lang.String[] arg1,java.lang.String arg2,java.lang.String[] arg3,java.lang.String arg4,java.lang.String arg5,java.lang.String arg6,java.lang.String arg7) { if (!testjnOverride( "buildQuery" )) return super.buildQuery( arg1, arg2, arg3, arg4, arg5, arg6, arg7); return (java.lang.String) jInterface.Jnido( this, jchildidx + "buildQuery_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7 } ); }
@Override public java.lang.String buildUnionSubQuery(java.lang.String arg1,java.lang.String[] arg2,java.util.Set arg3,int arg4,java.lang.String arg5,java.lang.String arg6,java.lang.String[] arg7,java.lang.String arg8,java.lang.String arg9) { if (!testjnOverride( "buildUnionSubQuery" )) return super.buildUnionSubQuery( arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9); return (java.lang.String) jInterface.Jnido( this, jchildidx + "buildUnionSubQuery_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9 } ); }
@Override public java.lang.String buildUnionQuery(java.lang.String[] arg1,java.lang.String arg2,java.lang.String arg3) { if (!testjnOverride( "buildUnionQuery" )) return super.buildUnionQuery( arg1, arg2, arg3); return (java.lang.String) jInterface.Jnido( this, jchildidx + "buildUnionQuery_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
}

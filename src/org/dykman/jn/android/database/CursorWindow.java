package org.dykman.jn.android.database;
public class CursorWindow extends android.database.CursorWindow{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public CursorWindow(boolean arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public short getShort(int arg1,int arg2) { if (!testjnOverride( "getShort" )) return super.getShort( arg1, arg2); return (java.lang.Short) jInterface.Jnido( this, jchildidx + "getShort_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int getInt(int arg1,int arg2) { if (!testjnOverride( "getInt" )) return super.getInt( arg1, arg2); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getInt_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public long getLong(int arg1,int arg2) { if (!testjnOverride( "getLong" )) return super.getLong( arg1, arg2); return (java.lang.Long) jInterface.Jnido( this, jchildidx + "getLong_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean putLong(long arg1,int arg2,int arg3) { if (!testjnOverride( "putLong" )) return super.putLong( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "putLong_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public float getFloat(int arg1,int arg2) { if (!testjnOverride( "getFloat" )) return super.getFloat( arg1, arg2); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getFloat_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public double getDouble(int arg1,int arg2) { if (!testjnOverride( "getDouble" )) return super.getDouble( arg1, arg2); return (java.lang.Double) jInterface.Jnido( this, jchildidx + "getDouble_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean putDouble(double arg1,int arg2,int arg3) { if (!testjnOverride( "putDouble" )) return super.putDouble( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "putDouble_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void clear(){ if (!testjnOverride( "clear" )) { super.clear(); return; } jInterface.Jnido( this, jchildidx + "clear_" + jlocale + "_", null ); }
@Override public void close(){ if (!testjnOverride( "close" )) { super.close(); return; } jInterface.Jnido( this, jchildidx + "close_" + jlocale + "_", null ); }
@Override public java.lang.String getString(int arg1,int arg2) { if (!testjnOverride( "getString" )) return super.getString( arg1, arg2); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getString_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int getStartPosition(){ if (!testjnOverride( "getStartPosition" )) return super.getStartPosition(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getStartPosition_" + jlocale + "_", null ); }
@Override public void setStartPosition(int arg1) { if (!testjnOverride( "setStartPosition" )) { super.setStartPosition( arg1); return; } jInterface.Jnido( this, jchildidx + "setStartPosition_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getNumRows(){ if (!testjnOverride( "getNumRows" )) return super.getNumRows(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getNumRows_" + jlocale + "_", null ); }
@Override public boolean setNumColumns(int arg1) { if (!testjnOverride( "setNumColumns" )) return super.setNumColumns( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "setNumColumns_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean allocRow(){ if (!testjnOverride( "allocRow" )) return super.allocRow(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "allocRow_" + jlocale + "_", null ); }
@Override public void freeLastRow(){ if (!testjnOverride( "freeLastRow" )) { super.freeLastRow(); return; } jInterface.Jnido( this, jchildidx + "freeLastRow_" + jlocale + "_", null ); }
@Override public boolean putBlob(byte[] arg1,int arg2,int arg3) { if (!testjnOverride( "putBlob" )) return super.putBlob( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "putBlob_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean putString(java.lang.String arg1,int arg2,int arg3) { if (!testjnOverride( "putString" )) return super.putString( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "putString_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean putNull(int arg1,int arg2) { if (!testjnOverride( "putNull" )) return super.putNull( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "putNull_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean isNull(int arg1,int arg2) { if (!testjnOverride( "isNull" )) return super.isNull( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isNull_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public byte[] getBlob(int arg1,int arg2) { if (!testjnOverride( "getBlob" )) return super.getBlob( arg1, arg2); return (byte[]) jInterface.Jnidoc( this, jchildidx + "getBlob_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean isBlob(int arg1,int arg2) { if (!testjnOverride( "isBlob" )) return super.isBlob( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isBlob_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean isLong(int arg1,int arg2) { if (!testjnOverride( "isLong" )) return super.isLong( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isLong_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean isFloat(int arg1,int arg2) { if (!testjnOverride( "isFloat" )) return super.isFloat( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isFloat_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean isString(int arg1,int arg2) { if (!testjnOverride( "isString" )) return super.isString( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isString_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void copyStringToBuffer(int arg1,int arg2,android.database.CharArrayBuffer arg3) { if (!testjnOverride( "copyStringToBuffer" )) { super.copyStringToBuffer( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "copyStringToBuffer_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int describeContents(){ if (!testjnOverride( "describeContents" )) return super.describeContents(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "describeContents_" + jlocale + "_", null ); }
@Override public void writeToParcel(android.os.Parcel arg1,int arg2) { if (!testjnOverride( "writeToParcel" )) { super.writeToParcel( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "writeToParcel_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override protected void onAllReferencesReleased(){ if (!testjnOverride( "onAllReferencesReleased" )) { super.onAllReferencesReleased(); return; } jInterface.Jnido( this, jchildidx + "onAllReferencesReleased_" + jlocale + "_", null ); }
}

package org.dykman.jn.android.media;
public class MediaPlayer extends android.media.MediaPlayer{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public MediaPlayer(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
@Override protected void finalize(){ if (!testjnOverride( "finalize" )) { super.finalize(); return; } jInterface.Jnido( this, jchildidx + "finalize_" + jlocale + "_", null ); }
@Override public void start() throws java.lang.IllegalStateException{ if (!testjnOverride( "start" )) { super.start(); return; } jInterface.Jnido( this, jchildidx + "start_" + jlocale + "_", null ); }
@Override public void stop() throws java.lang.IllegalStateException{ if (!testjnOverride( "stop" )) { super.stop(); return; } jInterface.Jnido( this, jchildidx + "stop_" + jlocale + "_", null ); }
@Override public void reset(){ if (!testjnOverride( "reset" )) { super.reset(); return; } jInterface.Jnido( this, jchildidx + "reset_" + jlocale + "_", null ); }
@Override public void release(){ if (!testjnOverride( "release" )) { super.release(); return; } jInterface.Jnido( this, jchildidx + "release_" + jlocale + "_", null ); }
@Override public void setDisplay(android.view.SurfaceHolder arg1) { if (!testjnOverride( "setDisplay" )) { super.setDisplay( arg1); return; } jInterface.Jnido( this, jchildidx + "setDisplay_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setDataSource(android.content.Context arg1,android.net.Uri arg2) throws java.io.IOException,java.lang.IllegalArgumentException,java.lang.SecurityException,java.lang.IllegalStateException { if (!testjnOverride( "setDataSource" )) { super.setDataSource( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setDataSource_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setDataSource(java.lang.String arg1) throws java.io.IOException,java.lang.IllegalArgumentException,java.lang.IllegalStateException { if (!testjnOverride( "setDataSource" )) { super.setDataSource( arg1); return; } jInterface.Jnido( this, jchildidx + "setDataSource_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setDataSource(java.io.FileDescriptor arg1) throws java.io.IOException,java.lang.IllegalArgumentException,java.lang.IllegalStateException { if (!testjnOverride( "setDataSource" )) { super.setDataSource( arg1); return; } jInterface.Jnido( this, jchildidx + "setDataSource_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setDataSource(java.io.FileDescriptor arg1,long arg2,long arg3) throws java.io.IOException,java.lang.IllegalArgumentException,java.lang.IllegalStateException { if (!testjnOverride( "setDataSource" )) { super.setDataSource( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "setDataSource_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void prepare() throws java.io.IOException,java.lang.IllegalStateException{ if (!testjnOverride( "prepare" )) { super.prepare(); return; } jInterface.Jnido( this, jchildidx + "prepare_" + jlocale + "_", null ); }
@Override public void prepareAsync() throws java.lang.IllegalStateException{ if (!testjnOverride( "prepareAsync" )) { super.prepareAsync(); return; } jInterface.Jnido( this, jchildidx + "prepareAsync_" + jlocale + "_", null ); }
@Override public void pause() throws java.lang.IllegalStateException{ if (!testjnOverride( "pause" )) { super.pause(); return; } jInterface.Jnido( this, jchildidx + "pause_" + jlocale + "_", null ); }
@Override public void setWakeMode(android.content.Context arg1,int arg2) { if (!testjnOverride( "setWakeMode" )) { super.setWakeMode( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setWakeMode_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setScreenOnWhilePlaying(boolean arg1) { if (!testjnOverride( "setScreenOnWhilePlaying" )) { super.setScreenOnWhilePlaying( arg1); return; } jInterface.Jnido( this, jchildidx + "setScreenOnWhilePlaying_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getVideoWidth(){ if (!testjnOverride( "getVideoWidth" )) return super.getVideoWidth(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getVideoWidth_" + jlocale + "_", null ); }
@Override public int getVideoHeight(){ if (!testjnOverride( "getVideoHeight" )) return super.getVideoHeight(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getVideoHeight_" + jlocale + "_", null ); }
@Override public boolean isPlaying(){ if (!testjnOverride( "isPlaying" )) return super.isPlaying(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isPlaying_" + jlocale + "_", null ); }
@Override public void seekTo(int arg1) throws java.lang.IllegalStateException { if (!testjnOverride( "seekTo" )) { super.seekTo( arg1); return; } jInterface.Jnido( this, jchildidx + "seekTo_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getCurrentPosition(){ if (!testjnOverride( "getCurrentPosition" )) return super.getCurrentPosition(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getCurrentPosition_" + jlocale + "_", null ); }
@Override public int getDuration(){ if (!testjnOverride( "getDuration" )) return super.getDuration(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getDuration_" + jlocale + "_", null ); }
@Override public void setAudioStreamType(int arg1) { if (!testjnOverride( "setAudioStreamType" )) { super.setAudioStreamType( arg1); return; } jInterface.Jnido( this, jchildidx + "setAudioStreamType_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setLooping(boolean arg1) { if (!testjnOverride( "setLooping" )) { super.setLooping( arg1); return; } jInterface.Jnido( this, jchildidx + "setLooping_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isLooping(){ if (!testjnOverride( "isLooping" )) return super.isLooping(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isLooping_" + jlocale + "_", null ); }
@Override public void setVolume(float arg1,float arg2) { if (!testjnOverride( "setVolume" )) { super.setVolume( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setVolume_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener arg1) { if (!testjnOverride( "setOnPreparedListener" )) { super.setOnPreparedListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnPreparedListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnCompletionListener(android.media.MediaPlayer.OnCompletionListener arg1) { if (!testjnOverride( "setOnCompletionListener" )) { super.setOnCompletionListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnCompletionListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnBufferingUpdateListener(android.media.MediaPlayer.OnBufferingUpdateListener arg1) { if (!testjnOverride( "setOnBufferingUpdateListener" )) { super.setOnBufferingUpdateListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnBufferingUpdateListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnSeekCompleteListener(android.media.MediaPlayer.OnSeekCompleteListener arg1) { if (!testjnOverride( "setOnSeekCompleteListener" )) { super.setOnSeekCompleteListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnSeekCompleteListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnVideoSizeChangedListener(android.media.MediaPlayer.OnVideoSizeChangedListener arg1) { if (!testjnOverride( "setOnVideoSizeChangedListener" )) { super.setOnVideoSizeChangedListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnVideoSizeChangedListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnErrorListener(android.media.MediaPlayer.OnErrorListener arg1) { if (!testjnOverride( "setOnErrorListener" )) { super.setOnErrorListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnErrorListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnInfoListener(android.media.MediaPlayer.OnInfoListener arg1) { if (!testjnOverride( "setOnInfoListener" )) { super.setOnInfoListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnInfoListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
}

package org.dykman.jn.android.media;
public class AudioTrack extends android.media.AudioTrack{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public AudioTrack(int arg1,int arg2,int arg3,int arg4,int arg5,int arg6, java.lang.String jlocale,String jchildid,String joverride ) throws java.lang.IllegalArgumentException{ super( arg1, arg2, arg3, arg4, arg5, arg6); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override protected void finalize(){ if (!testjnOverride( "finalize" )) { super.finalize(); return; } jInterface.Jnido( this, jchildidx + "finalize_" + jlocale + "_", null ); }
@Override public int write(byte[] arg1,int arg2,int arg3) { if (!testjnOverride( "write" )) return super.write( arg1, arg2, arg3); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "write_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int write(short[] arg1,int arg2,int arg3) { if (!testjnOverride( "write" )) return super.write( arg1, arg2, arg3); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "write_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int getState(){ if (!testjnOverride( "getState" )) return super.getState(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getState_" + jlocale + "_", null ); }
@Override public void stop() throws java.lang.IllegalStateException{ if (!testjnOverride( "stop" )) { super.stop(); return; } jInterface.Jnido( this, jchildidx + "stop_" + jlocale + "_", null ); }
@Override public void flush(){ if (!testjnOverride( "flush" )) { super.flush(); return; } jInterface.Jnido( this, jchildidx + "flush_" + jlocale + "_", null ); }
@Override public void release(){ if (!testjnOverride( "release" )) { super.release(); return; } jInterface.Jnido( this, jchildidx + "release_" + jlocale + "_", null ); }
@Override protected void setState(int arg1) { if (!testjnOverride( "setState" )) { super.setState( arg1); return; } jInterface.Jnido( this, jchildidx + "setState_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getSampleRate(){ if (!testjnOverride( "getSampleRate" )) return super.getSampleRate(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSampleRate_" + jlocale + "_", null ); }
@Override public int getPlaybackRate(){ if (!testjnOverride( "getPlaybackRate" )) return super.getPlaybackRate(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getPlaybackRate_" + jlocale + "_", null ); }
@Override public int getAudioFormat(){ if (!testjnOverride( "getAudioFormat" )) return super.getAudioFormat(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getAudioFormat_" + jlocale + "_", null ); }
@Override public int getStreamType(){ if (!testjnOverride( "getStreamType" )) return super.getStreamType(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getStreamType_" + jlocale + "_", null ); }
@Override public int getChannelConfiguration(){ if (!testjnOverride( "getChannelConfiguration" )) return super.getChannelConfiguration(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getChannelConfiguration_" + jlocale + "_", null ); }
@Override public int getChannelCount(){ if (!testjnOverride( "getChannelCount" )) return super.getChannelCount(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getChannelCount_" + jlocale + "_", null ); }
@Override public int getPlayState(){ if (!testjnOverride( "getPlayState" )) return super.getPlayState(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getPlayState_" + jlocale + "_", null ); }
@Override protected int getNativeFrameCount(){ if (!testjnOverride( "getNativeFrameCount" )) return super.getNativeFrameCount(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getNativeFrameCount_" + jlocale + "_", null ); }
@Override public int getNotificationMarkerPosition(){ if (!testjnOverride( "getNotificationMarkerPosition" )) return super.getNotificationMarkerPosition(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getNotificationMarkerPosition_" + jlocale + "_", null ); }
@Override public int getPositionNotificationPeriod(){ if (!testjnOverride( "getPositionNotificationPeriod" )) return super.getPositionNotificationPeriod(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getPositionNotificationPeriod_" + jlocale + "_", null ); }
@Override public int getPlaybackHeadPosition(){ if (!testjnOverride( "getPlaybackHeadPosition" )) return super.getPlaybackHeadPosition(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getPlaybackHeadPosition_" + jlocale + "_", null ); }
@Override public void setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener arg1) { if (!testjnOverride( "setPlaybackPositionUpdateListener" )) { super.setPlaybackPositionUpdateListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setPlaybackPositionUpdateListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setPlaybackPositionUpdateListener(android.media.AudioTrack.OnPlaybackPositionUpdateListener arg1,android.os.Handler arg2) { if (!testjnOverride( "setPlaybackPositionUpdateListener" )) { super.setPlaybackPositionUpdateListener( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setPlaybackPositionUpdateListener_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int setStereoVolume(float arg1,float arg2) { if (!testjnOverride( "setStereoVolume" )) return super.setStereoVolume( arg1, arg2); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "setStereoVolume_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int setPlaybackRate(int arg1) { if (!testjnOverride( "setPlaybackRate" )) return super.setPlaybackRate( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "setPlaybackRate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int setNotificationMarkerPosition(int arg1) { if (!testjnOverride( "setNotificationMarkerPosition" )) return super.setNotificationMarkerPosition( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "setNotificationMarkerPosition_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int setPositionNotificationPeriod(int arg1) { if (!testjnOverride( "setPositionNotificationPeriod" )) return super.setPositionNotificationPeriod( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "setPositionNotificationPeriod_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int setPlaybackHeadPosition(int arg1) { if (!testjnOverride( "setPlaybackHeadPosition" )) return super.setPlaybackHeadPosition( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "setPlaybackHeadPosition_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int setLoopPoints(int arg1,int arg2,int arg3) { if (!testjnOverride( "setLoopPoints" )) return super.setLoopPoints( arg1, arg2, arg3); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "setLoopPoints_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void play() throws java.lang.IllegalStateException{ if (!testjnOverride( "play" )) { super.play(); return; } jInterface.Jnido( this, jchildidx + "play_" + jlocale + "_", null ); }
@Override public void pause() throws java.lang.IllegalStateException{ if (!testjnOverride( "pause" )) { super.pause(); return; } jInterface.Jnido( this, jchildidx + "pause_" + jlocale + "_", null ); }
@Override public int reloadStaticData(){ if (!testjnOverride( "reloadStaticData" )) return super.reloadStaticData(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "reloadStaticData_" + jlocale + "_", null ); }
}

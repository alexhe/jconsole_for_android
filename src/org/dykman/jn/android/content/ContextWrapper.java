package org.dykman.jn.android.content;
public class ContextWrapper extends android.content.ContextWrapper{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public ContextWrapper(android.content.Context arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int checkPermission(java.lang.String arg1,int arg2,int arg3) { if (!testjnOverride( "checkPermission" )) return super.checkPermission( arg1, arg2, arg3); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "checkPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public java.lang.ClassLoader getClassLoader(){ if (!testjnOverride( "getClassLoader" )) return super.getClassLoader(); return (java.lang.ClassLoader) jInterface.Jnido( this, jchildidx + "getClassLoader_" + jlocale + "_", null ); }
@Override public android.content.res.Resources getResources(){ if (!testjnOverride( "getResources" )) return super.getResources(); return (android.content.res.Resources) jInterface.Jnido( this, jchildidx + "getResources_" + jlocale + "_", null ); }
@Override public java.lang.String getPackageName(){ if (!testjnOverride( "getPackageName" )) return super.getPackageName(); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getPackageName_" + jlocale + "_", null ); }
@Override protected void attachBaseContext(android.content.Context arg1) { if (!testjnOverride( "attachBaseContext" )) { super.attachBaseContext( arg1); return; } jInterface.Jnido( this, jchildidx + "attachBaseContext_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.Context getBaseContext(){ if (!testjnOverride( "getBaseContext" )) return super.getBaseContext(); return (android.content.Context) jInterface.Jnido( this, jchildidx + "getBaseContext_" + jlocale + "_", null ); }
@Override public android.content.res.AssetManager getAssets(){ if (!testjnOverride( "getAssets" )) return super.getAssets(); return (android.content.res.AssetManager) jInterface.Jnido( this, jchildidx + "getAssets_" + jlocale + "_", null ); }
@Override public android.content.pm.PackageManager getPackageManager(){ if (!testjnOverride( "getPackageManager" )) return super.getPackageManager(); return (android.content.pm.PackageManager) jInterface.Jnido( this, jchildidx + "getPackageManager_" + jlocale + "_", null ); }
@Override public android.content.ContentResolver getContentResolver(){ if (!testjnOverride( "getContentResolver" )) return super.getContentResolver(); return (android.content.ContentResolver) jInterface.Jnido( this, jchildidx + "getContentResolver_" + jlocale + "_", null ); }
@Override public android.os.Looper getMainLooper(){ if (!testjnOverride( "getMainLooper" )) return super.getMainLooper(); return (android.os.Looper) jInterface.Jnido( this, jchildidx + "getMainLooper_" + jlocale + "_", null ); }
@Override public android.content.Context getApplicationContext(){ if (!testjnOverride( "getApplicationContext" )) return super.getApplicationContext(); return (android.content.Context) jInterface.Jnido( this, jchildidx + "getApplicationContext_" + jlocale + "_", null ); }
@Override public void setTheme(int arg1) { if (!testjnOverride( "setTheme" )) { super.setTheme( arg1); return; } jInterface.Jnido( this, jchildidx + "setTheme_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.pm.ApplicationInfo getApplicationInfo(){ if (!testjnOverride( "getApplicationInfo" )) return super.getApplicationInfo(); return (android.content.pm.ApplicationInfo) jInterface.Jnido( this, jchildidx + "getApplicationInfo_" + jlocale + "_", null ); }
@Override public java.lang.String getPackageResourcePath(){ if (!testjnOverride( "getPackageResourcePath" )) return super.getPackageResourcePath(); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getPackageResourcePath_" + jlocale + "_", null ); }
@Override public java.lang.String getPackageCodePath(){ if (!testjnOverride( "getPackageCodePath" )) return super.getPackageCodePath(); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getPackageCodePath_" + jlocale + "_", null ); }
@Override public android.content.SharedPreferences getSharedPreferences(java.lang.String arg1,int arg2) { if (!testjnOverride( "getSharedPreferences" )) return super.getSharedPreferences( arg1, arg2); return (android.content.SharedPreferences) jInterface.Jnido( this, jchildidx + "getSharedPreferences_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.io.FileInputStream openFileInput(java.lang.String arg1) throws java.io.FileNotFoundException { if (!testjnOverride( "openFileInput" )) return super.openFileInput( arg1); return (java.io.FileInputStream) jInterface.Jnido( this, jchildidx + "openFileInput_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.io.FileOutputStream openFileOutput(java.lang.String arg1,int arg2) throws java.io.FileNotFoundException { if (!testjnOverride( "openFileOutput" )) return super.openFileOutput( arg1, arg2); return (java.io.FileOutputStream) jInterface.Jnido( this, jchildidx + "openFileOutput_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean deleteFile(java.lang.String arg1) { if (!testjnOverride( "deleteFile" )) return super.deleteFile( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "deleteFile_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.io.File getFileStreamPath(java.lang.String arg1) { if (!testjnOverride( "getFileStreamPath" )) return super.getFileStreamPath( arg1); return (java.io.File) jInterface.Jnido( this, jchildidx + "getFileStreamPath_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String[] fileList(){ if (!testjnOverride( "fileList" )) return super.fileList(); return (java.lang.String[]) jInterface.Jnidox( this, jchildidx + "fileList_" + jlocale + "_", null ); }
@Override public java.io.File getFilesDir(){ if (!testjnOverride( "getFilesDir" )) return super.getFilesDir(); return (java.io.File) jInterface.Jnido( this, jchildidx + "getFilesDir_" + jlocale + "_", null ); }
@Override public java.io.File getCacheDir(){ if (!testjnOverride( "getCacheDir" )) return super.getCacheDir(); return (java.io.File) jInterface.Jnido( this, jchildidx + "getCacheDir_" + jlocale + "_", null ); }
@Override public java.io.File getDir(java.lang.String arg1,int arg2) { if (!testjnOverride( "getDir" )) return super.getDir( arg1, arg2); return (java.io.File) jInterface.Jnido( this, jchildidx + "getDir_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String arg1,int arg2,android.database.sqlite.SQLiteDatabase.CursorFactory arg3) { if (!testjnOverride( "openOrCreateDatabase" )) return super.openOrCreateDatabase( arg1, arg2, arg3); return (android.database.sqlite.SQLiteDatabase) jInterface.Jnido( this, jchildidx + "openOrCreateDatabase_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean deleteDatabase(java.lang.String arg1) { if (!testjnOverride( "deleteDatabase" )) return super.deleteDatabase( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "deleteDatabase_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.io.File getDatabasePath(java.lang.String arg1) { if (!testjnOverride( "getDatabasePath" )) return super.getDatabasePath( arg1); return (java.io.File) jInterface.Jnido( this, jchildidx + "getDatabasePath_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String[] databaseList(){ if (!testjnOverride( "databaseList" )) return super.databaseList(); return (java.lang.String[]) jInterface.Jnidox( this, jchildidx + "databaseList_" + jlocale + "_", null ); }
@Override public android.graphics.drawable.Drawable getWallpaper(){ if (!testjnOverride( "getWallpaper" )) return super.getWallpaper(); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getWallpaper_" + jlocale + "_", null ); }
@Override public android.graphics.drawable.Drawable peekWallpaper(){ if (!testjnOverride( "peekWallpaper" )) return super.peekWallpaper(); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "peekWallpaper_" + jlocale + "_", null ); }
@Override public int getWallpaperDesiredMinimumWidth(){ if (!testjnOverride( "getWallpaperDesiredMinimumWidth" )) return super.getWallpaperDesiredMinimumWidth(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getWallpaperDesiredMinimumWidth_" + jlocale + "_", null ); }
@Override public int getWallpaperDesiredMinimumHeight(){ if (!testjnOverride( "getWallpaperDesiredMinimumHeight" )) return super.getWallpaperDesiredMinimumHeight(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getWallpaperDesiredMinimumHeight_" + jlocale + "_", null ); }
@Override public void setWallpaper(android.graphics.Bitmap arg1) throws java.io.IOException { if (!testjnOverride( "setWallpaper" )) { super.setWallpaper( arg1); return; } jInterface.Jnido( this, jchildidx + "setWallpaper_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setWallpaper(java.io.InputStream arg1) throws java.io.IOException { if (!testjnOverride( "setWallpaper" )) { super.setWallpaper( arg1); return; } jInterface.Jnido( this, jchildidx + "setWallpaper_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void clearWallpaper() throws java.io.IOException{ if (!testjnOverride( "clearWallpaper" )) { super.clearWallpaper(); return; } jInterface.Jnido( this, jchildidx + "clearWallpaper_" + jlocale + "_", null ); }
@Override public void startActivity(android.content.Intent arg1) { if (!testjnOverride( "startActivity" )) { super.startActivity( arg1); return; } jInterface.Jnido( this, jchildidx + "startActivity_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void startIntentSender(android.content.IntentSender arg1,android.content.Intent arg2,int arg3,int arg4,int arg5) throws android.content.IntentSender.SendIntentException { if (!testjnOverride( "startIntentSender" )) { super.startIntentSender( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "startIntentSender_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void sendBroadcast(android.content.Intent arg1) { if (!testjnOverride( "sendBroadcast" )) { super.sendBroadcast( arg1); return; } jInterface.Jnido( this, jchildidx + "sendBroadcast_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void sendBroadcast(android.content.Intent arg1,java.lang.String arg2) { if (!testjnOverride( "sendBroadcast" )) { super.sendBroadcast( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "sendBroadcast_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void sendOrderedBroadcast(android.content.Intent arg1,java.lang.String arg2) { if (!testjnOverride( "sendOrderedBroadcast" )) { super.sendOrderedBroadcast( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "sendOrderedBroadcast_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void sendOrderedBroadcast(android.content.Intent arg1,java.lang.String arg2,android.content.BroadcastReceiver arg3,android.os.Handler arg4,int arg5,java.lang.String arg6,android.os.Bundle arg7) { if (!testjnOverride( "sendOrderedBroadcast" )) { super.sendOrderedBroadcast( arg1, arg2, arg3, arg4, arg5, arg6, arg7); return; } jInterface.Jnido( this, jchildidx + "sendOrderedBroadcast_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7 } ); }
@Override public void sendStickyBroadcast(android.content.Intent arg1) { if (!testjnOverride( "sendStickyBroadcast" )) { super.sendStickyBroadcast( arg1); return; } jInterface.Jnido( this, jchildidx + "sendStickyBroadcast_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void sendStickyOrderedBroadcast(android.content.Intent arg1,android.content.BroadcastReceiver arg2,android.os.Handler arg3,int arg4,java.lang.String arg5,android.os.Bundle arg6) { if (!testjnOverride( "sendStickyOrderedBroadcast" )) { super.sendStickyOrderedBroadcast( arg1, arg2, arg3, arg4, arg5, arg6); return; } jInterface.Jnido( this, jchildidx + "sendStickyOrderedBroadcast_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override public void removeStickyBroadcast(android.content.Intent arg1) { if (!testjnOverride( "removeStickyBroadcast" )) { super.removeStickyBroadcast( arg1); return; } jInterface.Jnido( this, jchildidx + "removeStickyBroadcast_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.Intent registerReceiver(android.content.BroadcastReceiver arg1,android.content.IntentFilter arg2) { if (!testjnOverride( "registerReceiver" )) return super.registerReceiver( arg1, arg2); return (android.content.Intent) jInterface.Jnido( this, jchildidx + "registerReceiver_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.content.Intent registerReceiver(android.content.BroadcastReceiver arg1,android.content.IntentFilter arg2,java.lang.String arg3,android.os.Handler arg4) { if (!testjnOverride( "registerReceiver" )) return super.registerReceiver( arg1, arg2, arg3, arg4); return (android.content.Intent) jInterface.Jnido( this, jchildidx + "registerReceiver_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void unregisterReceiver(android.content.BroadcastReceiver arg1) { if (!testjnOverride( "unregisterReceiver" )) { super.unregisterReceiver( arg1); return; } jInterface.Jnido( this, jchildidx + "unregisterReceiver_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.ComponentName startService(android.content.Intent arg1) { if (!testjnOverride( "startService" )) return super.startService( arg1); return (android.content.ComponentName) jInterface.Jnido( this, jchildidx + "startService_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean stopService(android.content.Intent arg1) { if (!testjnOverride( "stopService" )) return super.stopService( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "stopService_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean bindService(android.content.Intent arg1,android.content.ServiceConnection arg2,int arg3) { if (!testjnOverride( "bindService" )) return super.bindService( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "bindService_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void unbindService(android.content.ServiceConnection arg1) { if (!testjnOverride( "unbindService" )) { super.unbindService( arg1); return; } jInterface.Jnido( this, jchildidx + "unbindService_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean startInstrumentation(android.content.ComponentName arg1,java.lang.String arg2,android.os.Bundle arg3) { if (!testjnOverride( "startInstrumentation" )) return super.startInstrumentation( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "startInstrumentation_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public java.lang.Object getSystemService(java.lang.String arg1) { if (!testjnOverride( "getSystemService" )) return super.getSystemService( arg1); return (java.lang.Object) jInterface.Jnido( this, jchildidx + "getSystemService_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int checkCallingPermission(java.lang.String arg1) { if (!testjnOverride( "checkCallingPermission" )) return super.checkCallingPermission( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "checkCallingPermission_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int checkCallingOrSelfPermission(java.lang.String arg1) { if (!testjnOverride( "checkCallingOrSelfPermission" )) return super.checkCallingOrSelfPermission( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "checkCallingOrSelfPermission_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void enforcePermission(java.lang.String arg1,int arg2,int arg3,java.lang.String arg4) { if (!testjnOverride( "enforcePermission" )) { super.enforcePermission( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "enforcePermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void enforceCallingPermission(java.lang.String arg1,java.lang.String arg2) { if (!testjnOverride( "enforceCallingPermission" )) { super.enforceCallingPermission( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "enforceCallingPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void enforceCallingOrSelfPermission(java.lang.String arg1,java.lang.String arg2) { if (!testjnOverride( "enforceCallingOrSelfPermission" )) { super.enforceCallingOrSelfPermission( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "enforceCallingOrSelfPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void grantUriPermission(java.lang.String arg1,android.net.Uri arg2,int arg3) { if (!testjnOverride( "grantUriPermission" )) { super.grantUriPermission( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "grantUriPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void revokeUriPermission(android.net.Uri arg1,int arg2) { if (!testjnOverride( "revokeUriPermission" )) { super.revokeUriPermission( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "revokeUriPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int checkUriPermission(android.net.Uri arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "checkUriPermission" )) return super.checkUriPermission( arg1, arg2, arg3, arg4); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "checkUriPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public int checkUriPermission(android.net.Uri arg1,java.lang.String arg2,java.lang.String arg3,int arg4,int arg5,int arg6) { if (!testjnOverride( "checkUriPermission" )) return super.checkUriPermission( arg1, arg2, arg3, arg4, arg5, arg6); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "checkUriPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override public int checkCallingUriPermission(android.net.Uri arg1,int arg2) { if (!testjnOverride( "checkCallingUriPermission" )) return super.checkCallingUriPermission( arg1, arg2); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "checkCallingUriPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int checkCallingOrSelfUriPermission(android.net.Uri arg1,int arg2) { if (!testjnOverride( "checkCallingOrSelfUriPermission" )) return super.checkCallingOrSelfUriPermission( arg1, arg2); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "checkCallingOrSelfUriPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void enforceUriPermission(android.net.Uri arg1,int arg2,int arg3,int arg4,java.lang.String arg5) { if (!testjnOverride( "enforceUriPermission" )) { super.enforceUriPermission( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "enforceUriPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void enforceUriPermission(android.net.Uri arg1,java.lang.String arg2,java.lang.String arg3,int arg4,int arg5,int arg6,java.lang.String arg7) { if (!testjnOverride( "enforceUriPermission" )) { super.enforceUriPermission( arg1, arg2, arg3, arg4, arg5, arg6, arg7); return; } jInterface.Jnido( this, jchildidx + "enforceUriPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6, arg7 } ); }
@Override public void enforceCallingUriPermission(android.net.Uri arg1,int arg2,java.lang.String arg3) { if (!testjnOverride( "enforceCallingUriPermission" )) { super.enforceCallingUriPermission( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "enforceCallingUriPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void enforceCallingOrSelfUriPermission(android.net.Uri arg1,int arg2,java.lang.String arg3) { if (!testjnOverride( "enforceCallingOrSelfUriPermission" )) { super.enforceCallingOrSelfUriPermission( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "enforceCallingOrSelfUriPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public android.content.Context createPackageContext(java.lang.String arg1,int arg2) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "createPackageContext" )) return super.createPackageContext( arg1, arg2); return (android.content.Context) jInterface.Jnido( this, jchildidx + "createPackageContext_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean isRestricted(){ if (!testjnOverride( "isRestricted" )) return super.isRestricted(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isRestricted_" + jlocale + "_", null ); }
}

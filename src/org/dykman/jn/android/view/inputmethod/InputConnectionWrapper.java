package org.dykman.jn.android.view.inputmethod;
public class InputConnectionWrapper extends android.view.inputmethod.InputConnectionWrapper{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public InputConnectionWrapper(android.view.inputmethod.InputConnection arg1,boolean arg2, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void setTarget(android.view.inputmethod.InputConnection arg1) { if (!testjnOverride( "setTarget" )) { super.setTarget( arg1); return; } jInterface.Jnido( this, jchildidx + "setTarget_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.CharSequence getTextBeforeCursor(int arg1,int arg2) { if (!testjnOverride( "getTextBeforeCursor" )) return super.getTextBeforeCursor( arg1, arg2); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getTextBeforeCursor_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.lang.CharSequence getTextAfterCursor(int arg1,int arg2) { if (!testjnOverride( "getTextAfterCursor" )) return super.getTextAfterCursor( arg1, arg2); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getTextAfterCursor_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int getCursorCapsMode(int arg1) { if (!testjnOverride( "getCursorCapsMode" )) return super.getCursorCapsMode( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getCursorCapsMode_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest arg1,int arg2) { if (!testjnOverride( "getExtractedText" )) return super.getExtractedText( arg1, arg2); return (android.view.inputmethod.ExtractedText) jInterface.Jnido( this, jchildidx + "getExtractedText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean deleteSurroundingText(int arg1,int arg2) { if (!testjnOverride( "deleteSurroundingText" )) return super.deleteSurroundingText( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "deleteSurroundingText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean setComposingText(java.lang.CharSequence arg1,int arg2) { if (!testjnOverride( "setComposingText" )) return super.setComposingText( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "setComposingText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean finishComposingText(){ if (!testjnOverride( "finishComposingText" )) return super.finishComposingText(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "finishComposingText_" + jlocale + "_", null ); }
@Override public boolean commitText(java.lang.CharSequence arg1,int arg2) { if (!testjnOverride( "commitText" )) return super.commitText( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "commitText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean commitCompletion(android.view.inputmethod.CompletionInfo arg1) { if (!testjnOverride( "commitCompletion" )) return super.commitCompletion( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "commitCompletion_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean setSelection(int arg1,int arg2) { if (!testjnOverride( "setSelection" )) return super.setSelection( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "setSelection_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean performEditorAction(int arg1) { if (!testjnOverride( "performEditorAction" )) return super.performEditorAction( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "performEditorAction_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean performContextMenuAction(int arg1) { if (!testjnOverride( "performContextMenuAction" )) return super.performContextMenuAction( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "performContextMenuAction_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean beginBatchEdit(){ if (!testjnOverride( "beginBatchEdit" )) return super.beginBatchEdit(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "beginBatchEdit_" + jlocale + "_", null ); }
@Override public boolean endBatchEdit(){ if (!testjnOverride( "endBatchEdit" )) return super.endBatchEdit(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "endBatchEdit_" + jlocale + "_", null ); }
@Override public boolean sendKeyEvent(android.view.KeyEvent arg1) { if (!testjnOverride( "sendKeyEvent" )) return super.sendKeyEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "sendKeyEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean clearMetaKeyStates(int arg1) { if (!testjnOverride( "clearMetaKeyStates" )) return super.clearMetaKeyStates( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "clearMetaKeyStates_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean reportFullscreenMode(boolean arg1) { if (!testjnOverride( "reportFullscreenMode" )) return super.reportFullscreenMode( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "reportFullscreenMode_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean performPrivateCommand(java.lang.String arg1,android.os.Bundle arg2) { if (!testjnOverride( "performPrivateCommand" )) return super.performPrivateCommand( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "performPrivateCommand_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
}

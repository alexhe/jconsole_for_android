package org.dykman.jn.android.view;
public class View extends android.view.View{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList<Object> jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public View(android.content.Context arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
public View(android.content.Context arg1,android.util.AttributeSet arg2, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
public View(android.content.Context arg1,android.util.AttributeSet arg2,int arg3, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override protected void finalize() throws java.lang.Throwable{ if (!testjnOverride( "finalize" )) { super.finalize(); return; } jInterface.Jnido( this, jchildidx + "finalize_" + jlocale + "_", null ); }
@Override public android.content.res.Resources getResources(){ if (!testjnOverride( "getResources" )) return super.getResources(); return (android.content.res.Resources) jInterface.Jnido( this, jchildidx + "getResources_" + jlocale + "_", null ); }
@Override public int getId(){ if (!testjnOverride( "getId" )) return super.getId(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getId_" + jlocale + "_", null ); }
@Override public boolean isOpaque(){ if (!testjnOverride( "isOpaque" )) return super.isOpaque(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isOpaque_" + jlocale + "_", null ); }
@Override public android.os.Handler getHandler(){ if (!testjnOverride( "getHandler" )) return super.getHandler(); return (android.os.Handler) jInterface.Jnido( this, jchildidx + "getHandler_" + jlocale + "_", null ); }
@Override protected void initializeFadingEdge(android.content.res.TypedArray arg1) { if (!testjnOverride( "initializeFadingEdge" )) { super.initializeFadingEdge( arg1); return; } jInterface.Jnido( this, jchildidx + "initializeFadingEdge_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getVerticalFadingEdgeLength(){ if (!testjnOverride( "getVerticalFadingEdgeLength" )) return super.getVerticalFadingEdgeLength(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getVerticalFadingEdgeLength_" + jlocale + "_", null ); }
@Override public void setFadingEdgeLength(int arg1) { if (!testjnOverride( "setFadingEdgeLength" )) { super.setFadingEdgeLength( arg1); return; } jInterface.Jnido( this, jchildidx + "setFadingEdgeLength_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getHorizontalFadingEdgeLength(){ if (!testjnOverride( "getHorizontalFadingEdgeLength" )) return super.getHorizontalFadingEdgeLength(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getHorizontalFadingEdgeLength_" + jlocale + "_", null ); }
@Override public int getVerticalScrollbarWidth(){ if (!testjnOverride( "getVerticalScrollbarWidth" )) return super.getVerticalScrollbarWidth(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getVerticalScrollbarWidth_" + jlocale + "_", null ); }
@Override protected int getHorizontalScrollbarHeight(){ if (!testjnOverride( "getHorizontalScrollbarHeight" )) return super.getHorizontalScrollbarHeight(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getHorizontalScrollbarHeight_" + jlocale + "_", null ); }
@Override protected void initializeScrollbars(android.content.res.TypedArray arg1) { if (!testjnOverride( "initializeScrollbars" )) { super.initializeScrollbars( arg1); return; } jInterface.Jnido( this, jchildidx + "initializeScrollbars_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnFocusChangeListener(android.view.View.OnFocusChangeListener arg1) { if (!testjnOverride( "setOnFocusChangeListener" )) { super.setOnFocusChangeListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnFocusChangeListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnClickListener(android.view.View.OnClickListener arg1) { if (!testjnOverride( "setOnClickListener" )) { super.setOnClickListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnClickListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnLongClickListener(android.view.View.OnLongClickListener arg1) { if (!testjnOverride( "setOnLongClickListener" )) { super.setOnLongClickListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnLongClickListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnCreateContextMenuListener(android.view.View.OnCreateContextMenuListener arg1) { if (!testjnOverride( "setOnCreateContextMenuListener" )) { super.setOnCreateContextMenuListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnCreateContextMenuListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean performClick(){ if (!testjnOverride( "performClick" )) return super.performClick(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "performClick_" + jlocale + "_", null ); }
@Override public boolean performLongClick(){ if (!testjnOverride( "performLongClick" )) return super.performLongClick(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "performLongClick_" + jlocale + "_", null ); }
@Override public boolean showContextMenu(){ if (!testjnOverride( "showContextMenu" )) return super.showContextMenu(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "showContextMenu_" + jlocale + "_", null ); }
@Override public void setOnKeyListener(android.view.View.OnKeyListener arg1) { if (!testjnOverride( "setOnKeyListener" )) { super.setOnKeyListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnKeyListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setOnTouchListener(android.view.View.OnTouchListener arg1) { if (!testjnOverride( "setOnTouchListener" )) { super.setOnTouchListener( arg1); return; } jInterface.Jnido( this, jchildidx + "setOnTouchListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean requestRectangleOnScreen(android.graphics.Rect arg1) { if (!testjnOverride( "requestRectangleOnScreen" )) return super.requestRectangleOnScreen( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "requestRectangleOnScreen_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean requestRectangleOnScreen(android.graphics.Rect arg1,boolean arg2) { if (!testjnOverride( "requestRectangleOnScreen" )) return super.requestRectangleOnScreen( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "requestRectangleOnScreen_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void clearFocus(){ if (!testjnOverride( "clearFocus" )) { super.clearFocus(); return; } jInterface.Jnido( this, jchildidx + "clearFocus_" + jlocale + "_", null ); }
@Override public boolean hasFocus(){ if (!testjnOverride( "hasFocus" )) return super.hasFocus(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "hasFocus_" + jlocale + "_", null ); }
@Override public boolean hasFocusable(){ if (!testjnOverride( "hasFocusable" )) return super.hasFocusable(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "hasFocusable_" + jlocale + "_", null ); }
@Override protected void onFocusChanged(boolean arg1,int arg2,android.graphics.Rect arg3) { if (!testjnOverride( "onFocusChanged" )) { super.onFocusChanged( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "onFocusChanged_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void sendAccessibilityEvent(int arg1) { if (!testjnOverride( "sendAccessibilityEvent" )) { super.sendAccessibilityEvent( arg1); return; } jInterface.Jnido( this, jchildidx + "sendAccessibilityEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent arg1) { if (!testjnOverride( "sendAccessibilityEventUnchecked" )) { super.sendAccessibilityEventUnchecked( arg1); return; } jInterface.Jnido( this, jchildidx + "sendAccessibilityEventUnchecked_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent arg1) { if (!testjnOverride( "dispatchPopulateAccessibilityEvent" )) return super.dispatchPopulateAccessibilityEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "dispatchPopulateAccessibilityEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.CharSequence getContentDescription(){ if (!testjnOverride( "getContentDescription" )) return super.getContentDescription(); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getContentDescription_" + jlocale + "_", null ); }
@Override public void setContentDescription(java.lang.CharSequence arg1) { if (!testjnOverride( "setContentDescription" )) { super.setContentDescription( arg1); return; } jInterface.Jnido( this, jchildidx + "setContentDescription_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isFocused(){ if (!testjnOverride( "isFocused" )) return super.isFocused(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isFocused_" + jlocale + "_", null ); }
@Override public android.view.View findFocus(){ if (!testjnOverride( "findFocus" )) return super.findFocus(); return (android.view.View) jInterface.Jnido( this, jchildidx + "findFocus_" + jlocale + "_", null ); }
@Override public void setScrollContainer(boolean arg1) { if (!testjnOverride( "setScrollContainer" )) { super.setScrollContainer( arg1); return; } jInterface.Jnido( this, jchildidx + "setScrollContainer_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getDrawingCacheQuality(){ if (!testjnOverride( "getDrawingCacheQuality" )) return super.getDrawingCacheQuality(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getDrawingCacheQuality_" + jlocale + "_", null ); }
@Override public void setDrawingCacheQuality(int arg1) { if (!testjnOverride( "setDrawingCacheQuality" )) { super.setDrawingCacheQuality( arg1); return; } jInterface.Jnido( this, jchildidx + "setDrawingCacheQuality_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean getKeepScreenOn(){ if (!testjnOverride( "getKeepScreenOn" )) return super.getKeepScreenOn(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "getKeepScreenOn_" + jlocale + "_", null ); }
@Override public void setKeepScreenOn(boolean arg1) { if (!testjnOverride( "setKeepScreenOn" )) { super.setKeepScreenOn( arg1); return; } jInterface.Jnido( this, jchildidx + "setKeepScreenOn_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getNextFocusLeftId(){ if (!testjnOverride( "getNextFocusLeftId" )) return super.getNextFocusLeftId(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getNextFocusLeftId_" + jlocale + "_", null ); }
@Override public void setNextFocusLeftId(int arg1) { if (!testjnOverride( "setNextFocusLeftId" )) { super.setNextFocusLeftId( arg1); return; } jInterface.Jnido( this, jchildidx + "setNextFocusLeftId_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getNextFocusRightId(){ if (!testjnOverride( "getNextFocusRightId" )) return super.getNextFocusRightId(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getNextFocusRightId_" + jlocale + "_", null ); }
@Override public void setNextFocusRightId(int arg1) { if (!testjnOverride( "setNextFocusRightId" )) { super.setNextFocusRightId( arg1); return; } jInterface.Jnido( this, jchildidx + "setNextFocusRightId_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getNextFocusUpId(){ if (!testjnOverride( "getNextFocusUpId" )) return super.getNextFocusUpId(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getNextFocusUpId_" + jlocale + "_", null ); }
@Override public void setNextFocusUpId(int arg1) { if (!testjnOverride( "setNextFocusUpId" )) { super.setNextFocusUpId( arg1); return; } jInterface.Jnido( this, jchildidx + "setNextFocusUpId_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getNextFocusDownId(){ if (!testjnOverride( "getNextFocusDownId" )) return super.getNextFocusDownId(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getNextFocusDownId_" + jlocale + "_", null ); }
@Override public void setNextFocusDownId(int arg1) { if (!testjnOverride( "setNextFocusDownId" )) { super.setNextFocusDownId( arg1); return; } jInterface.Jnido( this, jchildidx + "setNextFocusDownId_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isShown(){ if (!testjnOverride( "isShown" )) return super.isShown(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isShown_" + jlocale + "_", null ); }
@Override protected boolean fitSystemWindows(android.graphics.Rect arg1) { if (!testjnOverride( "fitSystemWindows" )) return super.fitSystemWindows( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "fitSystemWindows_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getVisibility(){ if (!testjnOverride( "getVisibility" )) return super.getVisibility(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getVisibility_" + jlocale + "_", null ); }
@Override public void setVisibility(int arg1) { if (!testjnOverride( "setVisibility" )) { super.setVisibility( arg1); return; } jInterface.Jnido( this, jchildidx + "setVisibility_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isEnabled(){ if (!testjnOverride( "isEnabled" )) return super.isEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isEnabled_" + jlocale + "_", null ); }
@Override public void setEnabled(boolean arg1) { if (!testjnOverride( "setEnabled" )) { super.setEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setFocusable(boolean arg1) { if (!testjnOverride( "setFocusable" )) { super.setFocusable( arg1); return; } jInterface.Jnido( this, jchildidx + "setFocusable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setFocusableInTouchMode(boolean arg1) { if (!testjnOverride( "setFocusableInTouchMode" )) { super.setFocusableInTouchMode( arg1); return; } jInterface.Jnido( this, jchildidx + "setFocusableInTouchMode_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setSoundEffectsEnabled(boolean arg1) { if (!testjnOverride( "setSoundEffectsEnabled" )) { super.setSoundEffectsEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setSoundEffectsEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isSoundEffectsEnabled(){ if (!testjnOverride( "isSoundEffectsEnabled" )) return super.isSoundEffectsEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isSoundEffectsEnabled_" + jlocale + "_", null ); }
@Override public void setHapticFeedbackEnabled(boolean arg1) { if (!testjnOverride( "setHapticFeedbackEnabled" )) { super.setHapticFeedbackEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setHapticFeedbackEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isHapticFeedbackEnabled(){ if (!testjnOverride( "isHapticFeedbackEnabled" )) return super.isHapticFeedbackEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isHapticFeedbackEnabled_" + jlocale + "_", null ); }
@Override public void setWillNotDraw(boolean arg1) { if (!testjnOverride( "setWillNotDraw" )) { super.setWillNotDraw( arg1); return; } jInterface.Jnido( this, jchildidx + "setWillNotDraw_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean willNotDraw(){ if (!testjnOverride( "willNotDraw" )) return super.willNotDraw(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "willNotDraw_" + jlocale + "_", null ); }
@Override public void setWillNotCacheDrawing(boolean arg1) { if (!testjnOverride( "setWillNotCacheDrawing" )) { super.setWillNotCacheDrawing( arg1); return; } jInterface.Jnido( this, jchildidx + "setWillNotCacheDrawing_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean willNotCacheDrawing(){ if (!testjnOverride( "willNotCacheDrawing" )) return super.willNotCacheDrawing(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "willNotCacheDrawing_" + jlocale + "_", null ); }
@Override public boolean isClickable(){ if (!testjnOverride( "isClickable" )) return super.isClickable(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isClickable_" + jlocale + "_", null ); }
@Override public void setClickable(boolean arg1) { if (!testjnOverride( "setClickable" )) { super.setClickable( arg1); return; } jInterface.Jnido( this, jchildidx + "setClickable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isLongClickable(){ if (!testjnOverride( "isLongClickable" )) return super.isLongClickable(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isLongClickable_" + jlocale + "_", null ); }
@Override public void setLongClickable(boolean arg1) { if (!testjnOverride( "setLongClickable" )) { super.setLongClickable( arg1); return; } jInterface.Jnido( this, jchildidx + "setLongClickable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setPressed(boolean arg1) { if (!testjnOverride( "setPressed" )) { super.setPressed( arg1); return; } jInterface.Jnido( this, jchildidx + "setPressed_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void dispatchSetPressed(boolean arg1) { if (!testjnOverride( "dispatchSetPressed" )) { super.dispatchSetPressed( arg1); return; } jInterface.Jnido( this, jchildidx + "dispatchSetPressed_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isPressed(){ if (!testjnOverride( "isPressed" )) return super.isPressed(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isPressed_" + jlocale + "_", null ); }
@Override public boolean isSaveEnabled(){ if (!testjnOverride( "isSaveEnabled" )) return super.isSaveEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isSaveEnabled_" + jlocale + "_", null ); }
@Override public void setSaveEnabled(boolean arg1) { if (!testjnOverride( "setSaveEnabled" )) { super.setSaveEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setSaveEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.view.View focusSearch(int arg1) { if (!testjnOverride( "focusSearch" )) return super.focusSearch( arg1); return (android.view.View) jInterface.Jnido( this, jchildidx + "focusSearch_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean dispatchUnhandledMove(android.view.View arg1,int arg2) { if (!testjnOverride( "dispatchUnhandledMove" )) return super.dispatchUnhandledMove( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "dispatchUnhandledMove_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.util.ArrayList getFocusables(int arg1) { if (!testjnOverride( "getFocusables" )) return super.getFocusables( arg1); return (java.util.ArrayList) jInterface.Jnido( this, jchildidx + "getFocusables_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void addFocusables(java.util.ArrayList arg1,int arg2) { if (!testjnOverride( "addFocusables" )) { super.addFocusables( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "addFocusables_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void addFocusables(java.util.ArrayList arg1,int arg2,int arg3) { if (!testjnOverride( "addFocusables" )) { super.addFocusables( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "addFocusables_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public java.util.ArrayList getTouchables(){ if (!testjnOverride( "getTouchables" )) return super.getTouchables(); return (java.util.ArrayList) jInterface.Jnido( this, jchildidx + "getTouchables_" + jlocale + "_", null ); }
@Override public void addTouchables(java.util.ArrayList arg1) { if (!testjnOverride( "addTouchables" )) { super.addTouchables( arg1); return; } jInterface.Jnido( this, jchildidx + "addTouchables_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean requestFocus(int arg1,android.graphics.Rect arg2) { if (!testjnOverride( "requestFocus" )) return super.requestFocus( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "requestFocus_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void onStartTemporaryDetach(){ if (!testjnOverride( "onStartTemporaryDetach" )) { super.onStartTemporaryDetach(); return; } jInterface.Jnido( this, jchildidx + "onStartTemporaryDetach_" + jlocale + "_", null ); }
@Override public void onFinishTemporaryDetach(){ if (!testjnOverride( "onFinishTemporaryDetach" )) { super.onFinishTemporaryDetach(); return; } jInterface.Jnido( this, jchildidx + "onFinishTemporaryDetach_" + jlocale + "_", null ); }
@Override public boolean dispatchKeyEventPreIme(android.view.KeyEvent arg1) { if (!testjnOverride( "dispatchKeyEventPreIme" )) return super.dispatchKeyEventPreIme( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "dispatchKeyEventPreIme_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean dispatchKeyEvent(android.view.KeyEvent arg1) { if (!testjnOverride( "dispatchKeyEvent" )) return super.dispatchKeyEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "dispatchKeyEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean dispatchKeyShortcutEvent(android.view.KeyEvent arg1) { if (!testjnOverride( "dispatchKeyShortcutEvent" )) return super.dispatchKeyShortcutEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "dispatchKeyShortcutEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean dispatchTouchEvent(android.view.MotionEvent arg1) { if (!testjnOverride( "dispatchTouchEvent" )) return super.dispatchTouchEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "dispatchTouchEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean dispatchTrackballEvent(android.view.MotionEvent arg1) { if (!testjnOverride( "dispatchTrackballEvent" )) return super.dispatchTrackballEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "dispatchTrackballEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void dispatchWindowFocusChanged(boolean arg1) { if (!testjnOverride( "dispatchWindowFocusChanged" )) { super.dispatchWindowFocusChanged( arg1); return; } jInterface.Jnido( this, jchildidx + "dispatchWindowFocusChanged_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onWindowFocusChanged(boolean arg1) { if (!testjnOverride( "onWindowFocusChanged" )) { super.onWindowFocusChanged( arg1); return; } jInterface.Jnido( this, jchildidx + "onWindowFocusChanged_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean hasWindowFocus(){ if (!testjnOverride( "hasWindowFocus" )) return super.hasWindowFocus(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "hasWindowFocus_" + jlocale + "_", null ); }
@Override public void dispatchWindowVisibilityChanged(int arg1) { if (!testjnOverride( "dispatchWindowVisibilityChanged" )) { super.dispatchWindowVisibilityChanged( arg1); return; } jInterface.Jnido( this, jchildidx + "dispatchWindowVisibilityChanged_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void onWindowVisibilityChanged(int arg1) { if (!testjnOverride( "onWindowVisibilityChanged" )) { super.onWindowVisibilityChanged( arg1); return; } jInterface.Jnido( this, jchildidx + "onWindowVisibilityChanged_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getWindowVisibility(){ if (!testjnOverride( "getWindowVisibility" )) return super.getWindowVisibility(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getWindowVisibility_" + jlocale + "_", null ); }
@Override public void getWindowVisibleDisplayFrame(android.graphics.Rect arg1) { if (!testjnOverride( "getWindowVisibleDisplayFrame" )) { super.getWindowVisibleDisplayFrame( arg1); return; } jInterface.Jnido( this, jchildidx + "getWindowVisibleDisplayFrame_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isInTouchMode(){ if (!testjnOverride( "isInTouchMode" )) return super.isInTouchMode(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isInTouchMode_" + jlocale + "_", null ); }
@Override public boolean onKeyPreIme(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyPreIme" )) return super.onKeyPreIme( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyPreIme_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onKeyDown(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyDown" )) return super.onKeyDown( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyDown_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onKeyLongPress(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyLongPress" )) return super.onKeyLongPress( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyLongPress_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onKeyUp(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyUp" )) return super.onKeyUp( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyUp_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onKeyMultiple(int arg1,int arg2,android.view.KeyEvent arg3) { if (!testjnOverride( "onKeyMultiple" )) return super.onKeyMultiple( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyMultiple_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean onKeyShortcut(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyShortcut" )) return super.onKeyShortcut( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyShortcut_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onCheckIsTextEditor(){ if (!testjnOverride( "onCheckIsTextEditor" )) return super.onCheckIsTextEditor(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onCheckIsTextEditor_" + jlocale + "_", null ); }
@Override public android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo arg1) { if (!testjnOverride( "onCreateInputConnection" )) return super.onCreateInputConnection( arg1); return (android.view.inputmethod.InputConnection) jInterface.Jnido( this, jchildidx + "onCreateInputConnection_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean checkInputConnectionProxy(android.view.View arg1) { if (!testjnOverride( "checkInputConnectionProxy" )) return super.checkInputConnectionProxy( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "checkInputConnectionProxy_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void createContextMenu(android.view.ContextMenu arg1) { if (!testjnOverride( "createContextMenu" )) { super.createContextMenu( arg1); return; } jInterface.Jnido( this, jchildidx + "createContextMenu_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void onCreateContextMenu(android.view.ContextMenu arg1) { if (!testjnOverride( "onCreateContextMenu" )) { super.onCreateContextMenu( arg1); return; } jInterface.Jnido( this, jchildidx + "onCreateContextMenu_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean onTrackballEvent(android.view.MotionEvent arg1) { if (!testjnOverride( "onTrackballEvent" )) return super.onTrackballEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onTrackballEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean onTouchEvent(android.view.MotionEvent arg1) { if (!testjnOverride( "onTouchEvent" )) return super.onTouchEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onTouchEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void cancelLongPress(){ if (!testjnOverride( "cancelLongPress" )) { super.cancelLongPress(); return; } jInterface.Jnido( this, jchildidx + "cancelLongPress_" + jlocale + "_", null ); }
@Override public void setTouchDelegate(android.view.TouchDelegate arg1) { if (!testjnOverride( "setTouchDelegate" )) { super.setTouchDelegate( arg1); return; } jInterface.Jnido( this, jchildidx + "setTouchDelegate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.view.TouchDelegate getTouchDelegate(){ if (!testjnOverride( "getTouchDelegate" )) return super.getTouchDelegate(); return (android.view.TouchDelegate) jInterface.Jnido( this, jchildidx + "getTouchDelegate_" + jlocale + "_", null ); }
@Override public void bringToFront(){ if (!testjnOverride( "bringToFront" )) { super.bringToFront(); return; } jInterface.Jnido( this, jchildidx + "bringToFront_" + jlocale + "_", null ); }
@Override protected void onScrollChanged(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "onScrollChanged" )) { super.onScrollChanged( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "onScrollChanged_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override protected void onSizeChanged(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "onSizeChanged" )) { super.onSizeChanged( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "onSizeChanged_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override protected void dispatchDraw(android.graphics.Canvas arg1) { if (!testjnOverride( "dispatchDraw" )) { super.dispatchDraw( arg1); return; } jInterface.Jnido( this, jchildidx + "dispatchDraw_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void getDrawingRect(android.graphics.Rect arg1) { if (!testjnOverride( "getDrawingRect" )) { super.getDrawingRect( arg1); return; } jInterface.Jnido( this, jchildidx + "getDrawingRect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void getHitRect(android.graphics.Rect arg1) { if (!testjnOverride( "getHitRect" )) { super.getHitRect( arg1); return; } jInterface.Jnido( this, jchildidx + "getHitRect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void getFocusedRect(android.graphics.Rect arg1) { if (!testjnOverride( "getFocusedRect" )) { super.getFocusedRect( arg1); return; } jInterface.Jnido( this, jchildidx + "getFocusedRect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean getGlobalVisibleRect(android.graphics.Rect arg1,android.graphics.Point arg2) { if (!testjnOverride( "getGlobalVisibleRect" )) return super.getGlobalVisibleRect( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "getGlobalVisibleRect_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void offsetTopAndBottom(int arg1) { if (!testjnOverride( "offsetTopAndBottom" )) { super.offsetTopAndBottom( arg1); return; } jInterface.Jnido( this, jchildidx + "offsetTopAndBottom_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void offsetLeftAndRight(int arg1) { if (!testjnOverride( "offsetLeftAndRight" )) { super.offsetLeftAndRight( arg1); return; } jInterface.Jnido( this, jchildidx + "offsetLeftAndRight_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setLayoutParams(android.view.ViewGroup.LayoutParams arg1) { if (!testjnOverride( "setLayoutParams" )) { super.setLayoutParams( arg1); return; } jInterface.Jnido( this, jchildidx + "setLayoutParams_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void scrollTo(int arg1,int arg2) { if (!testjnOverride( "scrollTo" )) { super.scrollTo( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "scrollTo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void scrollBy(int arg1,int arg2) { if (!testjnOverride( "scrollBy" )) { super.scrollBy( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "scrollBy_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override protected boolean awakenScrollBars(){ if (!testjnOverride( "awakenScrollBars" )) return super.awakenScrollBars(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "awakenScrollBars_" + jlocale + "_", null ); }
@Override protected boolean awakenScrollBars(int arg1) { if (!testjnOverride( "awakenScrollBars" )) return super.awakenScrollBars( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "awakenScrollBars_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected boolean awakenScrollBars(int arg1,boolean arg2) { if (!testjnOverride( "awakenScrollBars" )) return super.awakenScrollBars( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "awakenScrollBars_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void invalidate(android.graphics.Rect arg1) { if (!testjnOverride( "invalidate" )) { super.invalidate( arg1); return; } jInterface.Jnido( this, jchildidx + "invalidate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void invalidate(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "invalidate" )) { super.invalidate( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "invalidate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void invalidate(){ if (!testjnOverride( "invalidate" )) { super.invalidate(); return; } jInterface.Jnido( this, jchildidx + "invalidate_" + jlocale + "_", null ); }
@Override public boolean post(java.lang.Runnable arg1) { if (!testjnOverride( "post" )) return super.post( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "post_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean postDelayed(java.lang.Runnable arg1,long arg2) { if (!testjnOverride( "postDelayed" )) return super.postDelayed( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "postDelayed_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean removeCallbacks(java.lang.Runnable arg1) { if (!testjnOverride( "removeCallbacks" )) return super.removeCallbacks( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "removeCallbacks_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void postInvalidate(){ if (!testjnOverride( "postInvalidate" )) { super.postInvalidate(); return; } jInterface.Jnido( this, jchildidx + "postInvalidate_" + jlocale + "_", null ); }
@Override public void postInvalidate(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "postInvalidate" )) { super.postInvalidate( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "postInvalidate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void postInvalidateDelayed(long arg1) { if (!testjnOverride( "postInvalidateDelayed" )) { super.postInvalidateDelayed( arg1); return; } jInterface.Jnido( this, jchildidx + "postInvalidateDelayed_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void postInvalidateDelayed(long arg1,int arg2,int arg3,int arg4,int arg5) { if (!testjnOverride( "postInvalidateDelayed" )) { super.postInvalidateDelayed( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "postInvalidateDelayed_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override public void computeScroll(){ if (!testjnOverride( "computeScroll" )) { super.computeScroll(); return; } jInterface.Jnido( this, jchildidx + "computeScroll_" + jlocale + "_", null ); }
@Override public boolean isHorizontalFadingEdgeEnabled(){ if (!testjnOverride( "isHorizontalFadingEdgeEnabled" )) return super.isHorizontalFadingEdgeEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isHorizontalFadingEdgeEnabled_" + jlocale + "_", null ); }
@Override public void setHorizontalFadingEdgeEnabled(boolean arg1) { if (!testjnOverride( "setHorizontalFadingEdgeEnabled" )) { super.setHorizontalFadingEdgeEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setHorizontalFadingEdgeEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isVerticalFadingEdgeEnabled(){ if (!testjnOverride( "isVerticalFadingEdgeEnabled" )) return super.isVerticalFadingEdgeEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isVerticalFadingEdgeEnabled_" + jlocale + "_", null ); }
@Override public void setVerticalFadingEdgeEnabled(boolean arg1) { if (!testjnOverride( "setVerticalFadingEdgeEnabled" )) { super.setVerticalFadingEdgeEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setVerticalFadingEdgeEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected float getTopFadingEdgeStrength(){ if (!testjnOverride( "getTopFadingEdgeStrength" )) return super.getTopFadingEdgeStrength(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getTopFadingEdgeStrength_" + jlocale + "_", null ); }
@Override protected float getBottomFadingEdgeStrength(){ if (!testjnOverride( "getBottomFadingEdgeStrength" )) return super.getBottomFadingEdgeStrength(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getBottomFadingEdgeStrength_" + jlocale + "_", null ); }
@Override protected float getLeftFadingEdgeStrength(){ if (!testjnOverride( "getLeftFadingEdgeStrength" )) return super.getLeftFadingEdgeStrength(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getLeftFadingEdgeStrength_" + jlocale + "_", null ); }
@Override protected float getRightFadingEdgeStrength(){ if (!testjnOverride( "getRightFadingEdgeStrength" )) return super.getRightFadingEdgeStrength(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getRightFadingEdgeStrength_" + jlocale + "_", null ); }
@Override public boolean isHorizontalScrollBarEnabled(){ if (!testjnOverride( "isHorizontalScrollBarEnabled" )) return super.isHorizontalScrollBarEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isHorizontalScrollBarEnabled_" + jlocale + "_", null ); }
@Override public void setHorizontalScrollBarEnabled(boolean arg1) { if (!testjnOverride( "setHorizontalScrollBarEnabled" )) { super.setHorizontalScrollBarEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setHorizontalScrollBarEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isVerticalScrollBarEnabled(){ if (!testjnOverride( "isVerticalScrollBarEnabled" )) return super.isVerticalScrollBarEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isVerticalScrollBarEnabled_" + jlocale + "_", null ); }
@Override public void setVerticalScrollBarEnabled(boolean arg1) { if (!testjnOverride( "setVerticalScrollBarEnabled" )) { super.setVerticalScrollBarEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setVerticalScrollBarEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setScrollbarFadingEnabled(boolean arg1) { if (!testjnOverride( "setScrollbarFadingEnabled" )) { super.setScrollbarFadingEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setScrollbarFadingEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isScrollbarFadingEnabled(){ if (!testjnOverride( "isScrollbarFadingEnabled" )) return super.isScrollbarFadingEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isScrollbarFadingEnabled_" + jlocale + "_", null ); }
@Override public void setScrollBarStyle(int arg1) { if (!testjnOverride( "setScrollBarStyle" )) { super.setScrollBarStyle( arg1); return; } jInterface.Jnido( this, jchildidx + "setScrollBarStyle_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getScrollBarStyle(){ if (!testjnOverride( "getScrollBarStyle" )) return super.getScrollBarStyle(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getScrollBarStyle_" + jlocale + "_", null ); }
@Override protected int computeHorizontalScrollRange(){ if (!testjnOverride( "computeHorizontalScrollRange" )) return super.computeHorizontalScrollRange(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "computeHorizontalScrollRange_" + jlocale + "_", null ); }
@Override protected int computeHorizontalScrollOffset(){ if (!testjnOverride( "computeHorizontalScrollOffset" )) return super.computeHorizontalScrollOffset(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "computeHorizontalScrollOffset_" + jlocale + "_", null ); }
@Override protected int computeHorizontalScrollExtent(){ if (!testjnOverride( "computeHorizontalScrollExtent" )) return super.computeHorizontalScrollExtent(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "computeHorizontalScrollExtent_" + jlocale + "_", null ); }
@Override protected int computeVerticalScrollRange(){ if (!testjnOverride( "computeVerticalScrollRange" )) return super.computeVerticalScrollRange(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "computeVerticalScrollRange_" + jlocale + "_", null ); }
@Override protected int computeVerticalScrollOffset(){ if (!testjnOverride( "computeVerticalScrollOffset" )) return super.computeVerticalScrollOffset(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "computeVerticalScrollOffset_" + jlocale + "_", null ); }
@Override protected int computeVerticalScrollExtent(){ if (!testjnOverride( "computeVerticalScrollExtent" )) return super.computeVerticalScrollExtent(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "computeVerticalScrollExtent_" + jlocale + "_", null ); }
@Override protected void onDraw(android.graphics.Canvas arg1) { if (!testjnOverride( "onDraw" )) { super.onDraw( arg1); return; } jInterface.Jnido( this, jchildidx + "onDraw_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void onAttachedToWindow(){ if (!testjnOverride( "onAttachedToWindow" )) { super.onAttachedToWindow(); return; } jInterface.Jnido( this, jchildidx + "onAttachedToWindow_" + jlocale + "_", null ); }
@Override protected void onDetachedFromWindow(){ if (!testjnOverride( "onDetachedFromWindow" )) { super.onDetachedFromWindow(); return; } jInterface.Jnido( this, jchildidx + "onDetachedFromWindow_" + jlocale + "_", null ); }
@Override protected int getWindowAttachCount(){ if (!testjnOverride( "getWindowAttachCount" )) return super.getWindowAttachCount(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getWindowAttachCount_" + jlocale + "_", null ); }
@Override public android.os.IBinder getWindowToken(){ if (!testjnOverride( "getWindowToken" )) return super.getWindowToken(); return (android.os.IBinder) jInterface.Jnido( this, jchildidx + "getWindowToken_" + jlocale + "_", null ); }
@Override public android.os.IBinder getApplicationWindowToken(){ if (!testjnOverride( "getApplicationWindowToken" )) return super.getApplicationWindowToken(); return (android.os.IBinder) jInterface.Jnido( this, jchildidx + "getApplicationWindowToken_" + jlocale + "_", null ); }
@Override public void saveHierarchyState(android.util.SparseArray arg1) { if (!testjnOverride( "saveHierarchyState" )) { super.saveHierarchyState( arg1); return; } jInterface.Jnido( this, jchildidx + "saveHierarchyState_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void dispatchSaveInstanceState(android.util.SparseArray arg1) { if (!testjnOverride( "dispatchSaveInstanceState" )) { super.dispatchSaveInstanceState( arg1); return; } jInterface.Jnido( this, jchildidx + "dispatchSaveInstanceState_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected android.os.Parcelable onSaveInstanceState(){ if (!testjnOverride( "onSaveInstanceState" )) return super.onSaveInstanceState(); return (android.os.Parcelable) jInterface.Jnido( this, jchildidx + "onSaveInstanceState_" + jlocale + "_", null ); }
@Override public void restoreHierarchyState(android.util.SparseArray arg1) { if (!testjnOverride( "restoreHierarchyState" )) { super.restoreHierarchyState( arg1); return; } jInterface.Jnido( this, jchildidx + "restoreHierarchyState_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void dispatchRestoreInstanceState(android.util.SparseArray arg1) { if (!testjnOverride( "dispatchRestoreInstanceState" )) { super.dispatchRestoreInstanceState( arg1); return; } jInterface.Jnido( this, jchildidx + "dispatchRestoreInstanceState_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void onRestoreInstanceState(android.os.Parcelable arg1) { if (!testjnOverride( "onRestoreInstanceState" )) { super.onRestoreInstanceState( arg1); return; } jInterface.Jnido( this, jchildidx + "onRestoreInstanceState_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public long getDrawingTime(){ if (!testjnOverride( "getDrawingTime" )) return super.getDrawingTime(); return (java.lang.Long) jInterface.Jnido( this, jchildidx + "getDrawingTime_" + jlocale + "_", null ); }
@Override public void setDuplicateParentStateEnabled(boolean arg1) { if (!testjnOverride( "setDuplicateParentStateEnabled" )) { super.setDuplicateParentStateEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setDuplicateParentStateEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isDuplicateParentStateEnabled(){ if (!testjnOverride( "isDuplicateParentStateEnabled" )) return super.isDuplicateParentStateEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isDuplicateParentStateEnabled_" + jlocale + "_", null ); }
@Override public void setDrawingCacheEnabled(boolean arg1) { if (!testjnOverride( "setDrawingCacheEnabled" )) { super.setDrawingCacheEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setDrawingCacheEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isDrawingCacheEnabled(){ if (!testjnOverride( "isDrawingCacheEnabled" )) return super.isDrawingCacheEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isDrawingCacheEnabled_" + jlocale + "_", null ); }
@Override public android.graphics.Bitmap getDrawingCache(){ if (!testjnOverride( "getDrawingCache" )) return super.getDrawingCache(); return (android.graphics.Bitmap) jInterface.Jnido( this, jchildidx + "getDrawingCache_" + jlocale + "_", null ); }
@Override public android.graphics.Bitmap getDrawingCache(boolean arg1) { if (!testjnOverride( "getDrawingCache" )) return super.getDrawingCache( arg1); return (android.graphics.Bitmap) jInterface.Jnido( this, jchildidx + "getDrawingCache_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void destroyDrawingCache(){ if (!testjnOverride( "destroyDrawingCache" )) { super.destroyDrawingCache(); return; } jInterface.Jnido( this, jchildidx + "destroyDrawingCache_" + jlocale + "_", null ); }
@Override public void setDrawingCacheBackgroundColor(int arg1) { if (!testjnOverride( "setDrawingCacheBackgroundColor" )) { super.setDrawingCacheBackgroundColor( arg1); return; } jInterface.Jnido( this, jchildidx + "setDrawingCacheBackgroundColor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getDrawingCacheBackgroundColor(){ if (!testjnOverride( "getDrawingCacheBackgroundColor" )) return super.getDrawingCacheBackgroundColor(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getDrawingCacheBackgroundColor_" + jlocale + "_", null ); }
@Override public void buildDrawingCache(){ if (!testjnOverride( "buildDrawingCache" )) { super.buildDrawingCache(); return; } jInterface.Jnido( this, jchildidx + "buildDrawingCache_" + jlocale + "_", null ); }
@Override public void buildDrawingCache(boolean arg1) { if (!testjnOverride( "buildDrawingCache" )) { super.buildDrawingCache( arg1); return; } jInterface.Jnido( this, jchildidx + "buildDrawingCache_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isInEditMode(){ if (!testjnOverride( "isInEditMode" )) return super.isInEditMode(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isInEditMode_" + jlocale + "_", null ); }
@Override protected boolean isPaddingOffsetRequired(){ if (!testjnOverride( "isPaddingOffsetRequired" )) return super.isPaddingOffsetRequired(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isPaddingOffsetRequired_" + jlocale + "_", null ); }
@Override protected int getLeftPaddingOffset(){ if (!testjnOverride( "getLeftPaddingOffset" )) return super.getLeftPaddingOffset(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getLeftPaddingOffset_" + jlocale + "_", null ); }
@Override protected int getRightPaddingOffset(){ if (!testjnOverride( "getRightPaddingOffset" )) return super.getRightPaddingOffset(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getRightPaddingOffset_" + jlocale + "_", null ); }
@Override protected int getTopPaddingOffset(){ if (!testjnOverride( "getTopPaddingOffset" )) return super.getTopPaddingOffset(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getTopPaddingOffset_" + jlocale + "_", null ); }
@Override protected int getBottomPaddingOffset(){ if (!testjnOverride( "getBottomPaddingOffset" )) return super.getBottomPaddingOffset(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getBottomPaddingOffset_" + jlocale + "_", null ); }
@Override public void draw(android.graphics.Canvas arg1) { if (!testjnOverride( "draw" )) { super.draw( arg1); return; } jInterface.Jnido( this, jchildidx + "draw_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getSolidColor(){ if (!testjnOverride( "getSolidColor" )) return super.getSolidColor(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSolidColor_" + jlocale + "_", null ); }
@Override public boolean isLayoutRequested(){ if (!testjnOverride( "isLayoutRequested" )) return super.isLayoutRequested(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isLayoutRequested_" + jlocale + "_", null ); }
@Override protected void onLayout(boolean arg1,int arg2,int arg3,int arg4,int arg5) { if (!testjnOverride( "onLayout" )) { super.onLayout( arg1, arg2, arg3, arg4, arg5); return; } jInterface.Jnido( this, jchildidx + "onLayout_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5 } ); }
@Override protected void onFinishInflate(){ if (!testjnOverride( "onFinishInflate" )) { super.onFinishInflate(); return; } jInterface.Jnido( this, jchildidx + "onFinishInflate_" + jlocale + "_", null ); }
@Override public void invalidateDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "invalidateDrawable" )) { super.invalidateDrawable( arg1); return; } jInterface.Jnido( this, jchildidx + "invalidateDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void scheduleDrawable(android.graphics.drawable.Drawable arg1,java.lang.Runnable arg2,long arg3) { if (!testjnOverride( "scheduleDrawable" )) { super.scheduleDrawable( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "scheduleDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void unscheduleDrawable(android.graphics.drawable.Drawable arg1,java.lang.Runnable arg2) { if (!testjnOverride( "unscheduleDrawable" )) { super.unscheduleDrawable( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "unscheduleDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void unscheduleDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "unscheduleDrawable" )) { super.unscheduleDrawable( arg1); return; } jInterface.Jnido( this, jchildidx + "unscheduleDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected boolean verifyDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "verifyDrawable" )) return super.verifyDrawable( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "verifyDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void drawableStateChanged(){ if (!testjnOverride( "drawableStateChanged" )) { super.drawableStateChanged(); return; } jInterface.Jnido( this, jchildidx + "drawableStateChanged_" + jlocale + "_", null ); }
@Override public void refreshDrawableState(){ if (!testjnOverride( "refreshDrawableState" )) { super.refreshDrawableState(); return; } jInterface.Jnido( this, jchildidx + "refreshDrawableState_" + jlocale + "_", null ); }
@Override protected int[] onCreateDrawableState(int arg1) { if (!testjnOverride( "onCreateDrawableState" )) return super.onCreateDrawableState( arg1); return (int[]) jInterface.Jnidoi( this, jchildidx + "onCreateDrawableState_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setBackgroundColor(int arg1) { if (!testjnOverride( "setBackgroundColor" )) { super.setBackgroundColor( arg1); return; } jInterface.Jnido( this, jchildidx + "setBackgroundColor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setBackgroundResource(int arg1) { if (!testjnOverride( "setBackgroundResource" )) { super.setBackgroundResource( arg1); return; } jInterface.Jnido( this, jchildidx + "setBackgroundResource_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setBackgroundDrawable(android.graphics.drawable.Drawable arg1) { if (!testjnOverride( "setBackgroundDrawable" )) { super.setBackgroundDrawable( arg1); return; } jInterface.Jnido( this, jchildidx + "setBackgroundDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.drawable.Drawable getBackground(){ if (!testjnOverride( "getBackground" )) return super.getBackground(); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getBackground_" + jlocale + "_", null ); }
@Override public void setPadding(int arg1,int arg2,int arg3,int arg4) { if (!testjnOverride( "setPadding" )) { super.setPadding( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "setPadding_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public int getPaddingTop(){ if (!testjnOverride( "getPaddingTop" )) return super.getPaddingTop(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getPaddingTop_" + jlocale + "_", null ); }
@Override public int getPaddingBottom(){ if (!testjnOverride( "getPaddingBottom" )) return super.getPaddingBottom(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getPaddingBottom_" + jlocale + "_", null ); }
@Override public int getPaddingLeft(){ if (!testjnOverride( "getPaddingLeft" )) return super.getPaddingLeft(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getPaddingLeft_" + jlocale + "_", null ); }
@Override public int getPaddingRight(){ if (!testjnOverride( "getPaddingRight" )) return super.getPaddingRight(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getPaddingRight_" + jlocale + "_", null ); }
@Override public void setSelected(boolean arg1) { if (!testjnOverride( "setSelected" )) { super.setSelected( arg1); return; } jInterface.Jnido( this, jchildidx + "setSelected_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void dispatchSetSelected(boolean arg1) { if (!testjnOverride( "dispatchSetSelected" )) { super.dispatchSetSelected( arg1); return; } jInterface.Jnido( this, jchildidx + "dispatchSetSelected_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isSelected(){ if (!testjnOverride( "isSelected" )) return super.isSelected(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isSelected_" + jlocale + "_", null ); }
@Override public android.view.ViewTreeObserver getViewTreeObserver(){ if (!testjnOverride( "getViewTreeObserver" )) return super.getViewTreeObserver(); return (android.view.ViewTreeObserver) jInterface.Jnido( this, jchildidx + "getViewTreeObserver_" + jlocale + "_", null ); }
@Override public android.view.View getRootView(){ if (!testjnOverride( "getRootView" )) return super.getRootView(); return (android.view.View) jInterface.Jnido( this, jchildidx + "getRootView_" + jlocale + "_", null ); }
@Override public void getLocationOnScreen(int[] arg1) { if (!testjnOverride( "getLocationOnScreen" )) { super.getLocationOnScreen( arg1); return; } jInterface.Jnido( this, jchildidx + "getLocationOnScreen_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void getLocationInWindow(int[] arg1) { if (!testjnOverride( "getLocationInWindow" )) { super.getLocationInWindow( arg1); return; } jInterface.Jnido( this, jchildidx + "getLocationInWindow_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setId(int arg1) { if (!testjnOverride( "setId" )) { super.setId( arg1); return; } jInterface.Jnido( this, jchildidx + "setId_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.Object getTag(){ if (!testjnOverride( "getTag" )) return super.getTag(); return (java.lang.Object) jInterface.Jnido( this, jchildidx + "getTag_" + jlocale + "_", null ); }
@Override public java.lang.Object getTag(int arg1) { if (!testjnOverride( "getTag" )) return super.getTag( arg1); return (java.lang.Object) jInterface.Jnido( this, jchildidx + "getTag_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setTag(java.lang.Object arg1) { if (!testjnOverride( "setTag" )) { super.setTag( arg1); return; } jInterface.Jnido( this, jchildidx + "setTag_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setTag(int arg1,java.lang.Object arg2) { if (!testjnOverride( "setTag" )) { super.setTag( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "setTag_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int getBaseline(){ if (!testjnOverride( "getBaseline" )) return super.getBaseline(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getBaseline_" + jlocale + "_", null ); }
@Override public void requestLayout(){ if (!testjnOverride( "requestLayout" )) { super.requestLayout(); return; } jInterface.Jnido( this, jchildidx + "requestLayout_" + jlocale + "_", null ); }
@Override public void forceLayout(){ if (!testjnOverride( "forceLayout" )) { super.forceLayout(); return; } jInterface.Jnido( this, jchildidx + "forceLayout_" + jlocale + "_", null ); }
@Override protected void onMeasure(int arg1,int arg2) { if (!testjnOverride( "onMeasure" )) { super.onMeasure( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onMeasure_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override protected int getSuggestedMinimumHeight(){ if (!testjnOverride( "getSuggestedMinimumHeight" )) return super.getSuggestedMinimumHeight(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSuggestedMinimumHeight_" + jlocale + "_", null ); }
@Override protected int getSuggestedMinimumWidth(){ if (!testjnOverride( "getSuggestedMinimumWidth" )) return super.getSuggestedMinimumWidth(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getSuggestedMinimumWidth_" + jlocale + "_", null ); }
@Override public void setMinimumHeight(int arg1) { if (!testjnOverride( "setMinimumHeight" )) { super.setMinimumHeight( arg1); return; } jInterface.Jnido( this, jchildidx + "setMinimumHeight_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setMinimumWidth(int arg1) { if (!testjnOverride( "setMinimumWidth" )) { super.setMinimumWidth( arg1); return; } jInterface.Jnido( this, jchildidx + "setMinimumWidth_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.view.animation.Animation getAnimation(){ if (!testjnOverride( "getAnimation" )) return super.getAnimation(); return (android.view.animation.Animation) jInterface.Jnido( this, jchildidx + "getAnimation_" + jlocale + "_", null ); }
@Override public void startAnimation(android.view.animation.Animation arg1) { if (!testjnOverride( "startAnimation" )) { super.startAnimation( arg1); return; } jInterface.Jnido( this, jchildidx + "startAnimation_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void clearAnimation(){ if (!testjnOverride( "clearAnimation" )) { super.clearAnimation(); return; } jInterface.Jnido( this, jchildidx + "clearAnimation_" + jlocale + "_", null ); }
@Override public void setAnimation(android.view.animation.Animation arg1) { if (!testjnOverride( "setAnimation" )) { super.setAnimation( arg1); return; } jInterface.Jnido( this, jchildidx + "setAnimation_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void onAnimationStart(){ if (!testjnOverride( "onAnimationStart" )) { super.onAnimationStart(); return; } jInterface.Jnido( this, jchildidx + "onAnimationStart_" + jlocale + "_", null ); }
@Override protected void onAnimationEnd(){ if (!testjnOverride( "onAnimationEnd" )) { super.onAnimationEnd(); return; } jInterface.Jnido( this, jchildidx + "onAnimationEnd_" + jlocale + "_", null ); }
@Override protected boolean onSetAlpha(int arg1) { if (!testjnOverride( "onSetAlpha" )) return super.onSetAlpha( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onSetAlpha_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void playSoundEffect(int arg1) { if (!testjnOverride( "playSoundEffect" )) { super.playSoundEffect( arg1); return; } jInterface.Jnido( this, jchildidx + "playSoundEffect_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean performHapticFeedback(int arg1) { if (!testjnOverride( "performHapticFeedback" )) return super.performHapticFeedback( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "performHapticFeedback_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean performHapticFeedback(int arg1,int arg2) { if (!testjnOverride( "performHapticFeedback" )) return super.performHapticFeedback( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "performHapticFeedback_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
}

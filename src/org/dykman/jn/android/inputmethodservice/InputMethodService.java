package org.dykman.jn.android.inputmethodservice;
public class InputMethodService extends android.inputmethodservice.InputMethodService{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public InputMethodService(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
@Override public void setTheme(int arg1) { if (!testjnOverride( "setTheme" )) { super.setTheme( arg1); return; } jInterface.Jnido( this, jchildidx + "setTheme_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onCreate(){ if (!testjnOverride( "onCreate" )) { super.onCreate(); return; } jInterface.Jnido( this, jchildidx + "onCreate_" + jlocale + "_", null ); }
@Override public void onInitializeInterface(){ if (!testjnOverride( "onInitializeInterface" )) { super.onInitializeInterface(); return; } jInterface.Jnido( this, jchildidx + "onInitializeInterface_" + jlocale + "_", null ); }
@Override public void onDestroy(){ if (!testjnOverride( "onDestroy" )) { super.onDestroy(); return; } jInterface.Jnido( this, jchildidx + "onDestroy_" + jlocale + "_", null ); }
@Override public void onConfigurationChanged(android.content.res.Configuration arg1) { if (!testjnOverride( "onConfigurationChanged" )) { super.onConfigurationChanged( arg1); return; } jInterface.Jnido( this, jchildidx + "onConfigurationChanged_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.view.LayoutInflater getLayoutInflater(){ if (!testjnOverride( "getLayoutInflater" )) return super.getLayoutInflater(); return (android.view.LayoutInflater) jInterface.Jnido( this, jchildidx + "getLayoutInflater_" + jlocale + "_", null ); }
@Override public android.app.Dialog getWindow(){ if (!testjnOverride( "getWindow" )) return super.getWindow(); return (android.app.Dialog) jInterface.Jnido( this, jchildidx + "getWindow_" + jlocale + "_", null ); }
@Override public int getMaxWidth(){ if (!testjnOverride( "getMaxWidth" )) return super.getMaxWidth(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getMaxWidth_" + jlocale + "_", null ); }
@Override public android.view.inputmethod.InputBinding getCurrentInputBinding(){ if (!testjnOverride( "getCurrentInputBinding" )) return super.getCurrentInputBinding(); return (android.view.inputmethod.InputBinding) jInterface.Jnido( this, jchildidx + "getCurrentInputBinding_" + jlocale + "_", null ); }
@Override public android.view.inputmethod.InputConnection getCurrentInputConnection(){ if (!testjnOverride( "getCurrentInputConnection" )) return super.getCurrentInputConnection(); return (android.view.inputmethod.InputConnection) jInterface.Jnido( this, jchildidx + "getCurrentInputConnection_" + jlocale + "_", null ); }
@Override public boolean getCurrentInputStarted(){ if (!testjnOverride( "getCurrentInputStarted" )) return super.getCurrentInputStarted(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "getCurrentInputStarted_" + jlocale + "_", null ); }
@Override public android.view.inputmethod.EditorInfo getCurrentInputEditorInfo(){ if (!testjnOverride( "getCurrentInputEditorInfo" )) return super.getCurrentInputEditorInfo(); return (android.view.inputmethod.EditorInfo) jInterface.Jnido( this, jchildidx + "getCurrentInputEditorInfo_" + jlocale + "_", null ); }
@Override public void updateFullscreenMode(){ if (!testjnOverride( "updateFullscreenMode" )) { super.updateFullscreenMode(); return; } jInterface.Jnido( this, jchildidx + "updateFullscreenMode_" + jlocale + "_", null ); }
@Override public void onConfigureWindow(android.view.Window arg1,boolean arg2,boolean arg3) { if (!testjnOverride( "onConfigureWindow" )) { super.onConfigureWindow( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "onConfigureWindow_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean isFullscreenMode(){ if (!testjnOverride( "isFullscreenMode" )) return super.isFullscreenMode(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isFullscreenMode_" + jlocale + "_", null ); }
@Override public boolean onEvaluateFullscreenMode(){ if (!testjnOverride( "onEvaluateFullscreenMode" )) return super.onEvaluateFullscreenMode(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onEvaluateFullscreenMode_" + jlocale + "_", null ); }
@Override public void setExtractViewShown(boolean arg1) { if (!testjnOverride( "setExtractViewShown" )) { super.setExtractViewShown( arg1); return; } jInterface.Jnido( this, jchildidx + "setExtractViewShown_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isExtractViewShown(){ if (!testjnOverride( "isExtractViewShown" )) return super.isExtractViewShown(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isExtractViewShown_" + jlocale + "_", null ); }
@Override public void onComputeInsets(android.inputmethodservice.InputMethodService.Insets arg1) { if (!testjnOverride( "onComputeInsets" )) { super.onComputeInsets( arg1); return; } jInterface.Jnido( this, jchildidx + "onComputeInsets_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void updateInputViewShown(){ if (!testjnOverride( "updateInputViewShown" )) { super.updateInputViewShown(); return; } jInterface.Jnido( this, jchildidx + "updateInputViewShown_" + jlocale + "_", null ); }
@Override public boolean isShowInputRequested(){ if (!testjnOverride( "isShowInputRequested" )) return super.isShowInputRequested(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isShowInputRequested_" + jlocale + "_", null ); }
@Override public boolean isInputViewShown(){ if (!testjnOverride( "isInputViewShown" )) return super.isInputViewShown(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isInputViewShown_" + jlocale + "_", null ); }
@Override public boolean onEvaluateInputViewShown(){ if (!testjnOverride( "onEvaluateInputViewShown" )) return super.onEvaluateInputViewShown(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onEvaluateInputViewShown_" + jlocale + "_", null ); }
@Override public void setCandidatesViewShown(boolean arg1) { if (!testjnOverride( "setCandidatesViewShown" )) { super.setCandidatesViewShown( arg1); return; } jInterface.Jnido( this, jchildidx + "setCandidatesViewShown_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getCandidatesHiddenVisibility(){ if (!testjnOverride( "getCandidatesHiddenVisibility" )) return super.getCandidatesHiddenVisibility(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getCandidatesHiddenVisibility_" + jlocale + "_", null ); }
@Override public void showStatusIcon(int arg1) { if (!testjnOverride( "showStatusIcon" )) { super.showStatusIcon( arg1); return; } jInterface.Jnido( this, jchildidx + "showStatusIcon_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void hideStatusIcon(){ if (!testjnOverride( "hideStatusIcon" )) { super.hideStatusIcon(); return; } jInterface.Jnido( this, jchildidx + "hideStatusIcon_" + jlocale + "_", null ); }
@Override public void switchInputMethod(java.lang.String arg1) { if (!testjnOverride( "switchInputMethod" )) { super.switchInputMethod( arg1); return; } jInterface.Jnido( this, jchildidx + "switchInputMethod_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setExtractView(android.view.View arg1) { if (!testjnOverride( "setExtractView" )) { super.setExtractView( arg1); return; } jInterface.Jnido( this, jchildidx + "setExtractView_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setCandidatesView(android.view.View arg1) { if (!testjnOverride( "setCandidatesView" )) { super.setCandidatesView( arg1); return; } jInterface.Jnido( this, jchildidx + "setCandidatesView_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setInputView(android.view.View arg1) { if (!testjnOverride( "setInputView" )) { super.setInputView( arg1); return; } jInterface.Jnido( this, jchildidx + "setInputView_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.view.View onCreateExtractTextView(){ if (!testjnOverride( "onCreateExtractTextView" )) return super.onCreateExtractTextView(); return (android.view.View) jInterface.Jnido( this, jchildidx + "onCreateExtractTextView_" + jlocale + "_", null ); }
@Override public android.view.View onCreateCandidatesView(){ if (!testjnOverride( "onCreateCandidatesView" )) return super.onCreateCandidatesView(); return (android.view.View) jInterface.Jnido( this, jchildidx + "onCreateCandidatesView_" + jlocale + "_", null ); }
@Override public android.view.View onCreateInputView(){ if (!testjnOverride( "onCreateInputView" )) return super.onCreateInputView(); return (android.view.View) jInterface.Jnido( this, jchildidx + "onCreateInputView_" + jlocale + "_", null ); }
@Override public void onStartInputView(android.view.inputmethod.EditorInfo arg1,boolean arg2) { if (!testjnOverride( "onStartInputView" )) { super.onStartInputView( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onStartInputView_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void onFinishInputView(boolean arg1) { if (!testjnOverride( "onFinishInputView" )) { super.onFinishInputView( arg1); return; } jInterface.Jnido( this, jchildidx + "onFinishInputView_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onStartCandidatesView(android.view.inputmethod.EditorInfo arg1,boolean arg2) { if (!testjnOverride( "onStartCandidatesView" )) { super.onStartCandidatesView( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onStartCandidatesView_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void onFinishCandidatesView(boolean arg1) { if (!testjnOverride( "onFinishCandidatesView" )) { super.onFinishCandidatesView( arg1); return; } jInterface.Jnido( this, jchildidx + "onFinishCandidatesView_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean onShowInputRequested(int arg1,boolean arg2) { if (!testjnOverride( "onShowInputRequested" )) return super.onShowInputRequested( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onShowInputRequested_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void showWindow(boolean arg1) { if (!testjnOverride( "showWindow" )) { super.showWindow( arg1); return; } jInterface.Jnido( this, jchildidx + "showWindow_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void hideWindow(){ if (!testjnOverride( "hideWindow" )) { super.hideWindow(); return; } jInterface.Jnido( this, jchildidx + "hideWindow_" + jlocale + "_", null ); }
@Override public void onWindowShown(){ if (!testjnOverride( "onWindowShown" )) { super.onWindowShown(); return; } jInterface.Jnido( this, jchildidx + "onWindowShown_" + jlocale + "_", null ); }
@Override public void onWindowHidden(){ if (!testjnOverride( "onWindowHidden" )) { super.onWindowHidden(); return; } jInterface.Jnido( this, jchildidx + "onWindowHidden_" + jlocale + "_", null ); }
@Override public void onBindInput(){ if (!testjnOverride( "onBindInput" )) { super.onBindInput(); return; } jInterface.Jnido( this, jchildidx + "onBindInput_" + jlocale + "_", null ); }
@Override public void onUnbindInput(){ if (!testjnOverride( "onUnbindInput" )) { super.onUnbindInput(); return; } jInterface.Jnido( this, jchildidx + "onUnbindInput_" + jlocale + "_", null ); }
@Override public void onStartInput(android.view.inputmethod.EditorInfo arg1,boolean arg2) { if (!testjnOverride( "onStartInput" )) { super.onStartInput( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onStartInput_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void onFinishInput(){ if (!testjnOverride( "onFinishInput" )) { super.onFinishInput(); return; } jInterface.Jnido( this, jchildidx + "onFinishInput_" + jlocale + "_", null ); }
@Override public void onDisplayCompletions(android.view.inputmethod.CompletionInfo[] arg1) { if (!testjnOverride( "onDisplayCompletions" )) { super.onDisplayCompletions( arg1); return; } jInterface.Jnido( this, jchildidx + "onDisplayCompletions_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onUpdateExtractedText(int arg1,android.view.inputmethod.ExtractedText arg2) { if (!testjnOverride( "onUpdateExtractedText" )) { super.onUpdateExtractedText( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onUpdateExtractedText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void onUpdateSelection(int arg1,int arg2,int arg3,int arg4,int arg5,int arg6) { if (!testjnOverride( "onUpdateSelection" )) { super.onUpdateSelection( arg1, arg2, arg3, arg4, arg5, arg6); return; } jInterface.Jnido( this, jchildidx + "onUpdateSelection_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4, arg5, arg6 } ); }
@Override public void onUpdateCursor(android.graphics.Rect arg1) { if (!testjnOverride( "onUpdateCursor" )) { super.onUpdateCursor( arg1); return; } jInterface.Jnido( this, jchildidx + "onUpdateCursor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void requestHideSelf(int arg1) { if (!testjnOverride( "requestHideSelf" )) { super.requestHideSelf( arg1); return; } jInterface.Jnido( this, jchildidx + "requestHideSelf_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean onKeyDown(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyDown" )) return super.onKeyDown( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyDown_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onKeyLongPress(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyLongPress" )) return super.onKeyLongPress( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyLongPress_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onKeyMultiple(int arg1,int arg2,android.view.KeyEvent arg3) { if (!testjnOverride( "onKeyMultiple" )) return super.onKeyMultiple( arg1, arg2, arg3); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyMultiple_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public boolean onKeyUp(int arg1,android.view.KeyEvent arg2) { if (!testjnOverride( "onKeyUp" )) return super.onKeyUp( arg1, arg2); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onKeyUp_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onTrackballEvent(android.view.MotionEvent arg1) { if (!testjnOverride( "onTrackballEvent" )) return super.onTrackballEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onTrackballEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onAppPrivateCommand(java.lang.String arg1,android.os.Bundle arg2) { if (!testjnOverride( "onAppPrivateCommand" )) { super.onAppPrivateCommand( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onAppPrivateCommand_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void sendDownUpKeyEvents(int arg1) { if (!testjnOverride( "sendDownUpKeyEvents" )) { super.sendDownUpKeyEvents( arg1); return; } jInterface.Jnido( this, jchildidx + "sendDownUpKeyEvents_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean sendDefaultEditorAction(boolean arg1) { if (!testjnOverride( "sendDefaultEditorAction" )) return super.sendDefaultEditorAction( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "sendDefaultEditorAction_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void sendKeyChar(char arg1) { if (!testjnOverride( "sendKeyChar" )) { super.sendKeyChar( arg1); return; } jInterface.Jnido( this, jchildidx + "sendKeyChar_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onExtractedSelectionChanged(int arg1,int arg2) { if (!testjnOverride( "onExtractedSelectionChanged" )) { super.onExtractedSelectionChanged( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onExtractedSelectionChanged_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void onExtractedTextClicked(){ if (!testjnOverride( "onExtractedTextClicked" )) { super.onExtractedTextClicked(); return; } jInterface.Jnido( this, jchildidx + "onExtractedTextClicked_" + jlocale + "_", null ); }
@Override public void onExtractedCursorMovement(int arg1,int arg2) { if (!testjnOverride( "onExtractedCursorMovement" )) { super.onExtractedCursorMovement( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "onExtractedCursorMovement_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public boolean onExtractTextContextMenuItem(int arg1) { if (!testjnOverride( "onExtractTextContextMenuItem" )) return super.onExtractTextContextMenuItem( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "onExtractTextContextMenuItem_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.CharSequence getTextForImeAction(int arg1) { if (!testjnOverride( "getTextForImeAction" )) return super.getTextForImeAction( arg1); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getTextForImeAction_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onUpdateExtractingVisibility(android.view.inputmethod.EditorInfo arg1) { if (!testjnOverride( "onUpdateExtractingVisibility" )) { super.onUpdateExtractingVisibility( arg1); return; } jInterface.Jnido( this, jchildidx + "onUpdateExtractingVisibility_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onUpdateExtractingViews(android.view.inputmethod.EditorInfo arg1) { if (!testjnOverride( "onUpdateExtractingViews" )) { super.onUpdateExtractingViews( arg1); return; } jInterface.Jnido( this, jchildidx + "onUpdateExtractingViews_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void onExtractingInputChanged(android.view.inputmethod.EditorInfo arg1) { if (!testjnOverride( "onExtractingInputChanged" )) { super.onExtractingInputChanged( arg1); return; } jInterface.Jnido( this, jchildidx + "onExtractingInputChanged_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override protected void dump(java.io.FileDescriptor arg1,java.io.PrintWriter arg2,java.lang.String[] arg3) { if (!testjnOverride( "dump" )) { super.dump( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "dump_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
}

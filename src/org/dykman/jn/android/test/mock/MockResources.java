package org.dykman.jn.android.test.mock;
public class MockResources extends android.test.mock.MockResources{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public MockResources(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
@Override public void getValue(int arg1,android.util.TypedValue arg2,boolean arg3) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getValue" )) { super.getValue( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "getValue_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void getValue(java.lang.String arg1,android.util.TypedValue arg2,boolean arg3) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getValue" )) { super.getValue( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "getValue_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int getInteger(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getInteger" )) return super.getInteger( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getInteger_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String getString(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getString" )) return super.getString( arg1); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getString_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String getString(int arg1,java.lang.Object[] arg2) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getString" )) return super.getString( arg1, arg2); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getString_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public void updateConfiguration(android.content.res.Configuration arg1,android.util.DisplayMetrics arg2) { if (!testjnOverride( "updateConfiguration" )) { super.updateConfiguration( arg1, arg2); return; } jInterface.Jnido( this, jchildidx + "updateConfiguration_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.lang.CharSequence getText(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getText" )) return super.getText( arg1); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getText_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.CharSequence getText(int arg1,java.lang.CharSequence arg2) { if (!testjnOverride( "getText" )) return super.getText( arg1, arg2); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.lang.CharSequence getQuantityText(int arg1,int arg2) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getQuantityText" )) return super.getQuantityText( arg1, arg2); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getQuantityText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.lang.String getQuantityString(int arg1,int arg2,java.lang.Object[] arg3) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getQuantityString" )) return super.getQuantityString( arg1, arg2, arg3); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getQuantityString_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public java.lang.String getQuantityString(int arg1,int arg2) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getQuantityString" )) return super.getQuantityString( arg1, arg2); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getQuantityString_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.lang.CharSequence[] getTextArray(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getTextArray" )) return super.getTextArray( arg1); return (java.lang.CharSequence[]) jInterface.Jnidox( this, jchildidx + "getTextArray_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String[] getStringArray(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getStringArray" )) return super.getStringArray( arg1); return (java.lang.String[]) jInterface.Jnidox( this, jchildidx + "getStringArray_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int[] getIntArray(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getIntArray" )) return super.getIntArray( arg1); return (int[]) jInterface.Jnidoi( this, jchildidx + "getIntArray_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.res.TypedArray obtainTypedArray(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "obtainTypedArray" )) return super.obtainTypedArray( arg1); return (android.content.res.TypedArray) jInterface.Jnido( this, jchildidx + "obtainTypedArray_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public float getDimension(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getDimension" )) return super.getDimension( arg1); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getDimension_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getDimensionPixelOffset(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getDimensionPixelOffset" )) return super.getDimensionPixelOffset( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getDimensionPixelOffset_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getDimensionPixelSize(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getDimensionPixelSize" )) return super.getDimensionPixelSize( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getDimensionPixelSize_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.drawable.Drawable getDrawable(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getDrawable" )) return super.getDrawable( arg1); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.Movie getMovie(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getMovie" )) return super.getMovie( arg1); return (android.graphics.Movie) jInterface.Jnido( this, jchildidx + "getMovie_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getColor(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getColor" )) return super.getColor( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getColor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.res.ColorStateList getColorStateList(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getColorStateList" )) return super.getColorStateList( arg1); return (android.content.res.ColorStateList) jInterface.Jnido( this, jchildidx + "getColorStateList_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.res.XmlResourceParser getLayout(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getLayout" )) return super.getLayout( arg1); return (android.content.res.XmlResourceParser) jInterface.Jnido( this, jchildidx + "getLayout_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.res.XmlResourceParser getAnimation(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getAnimation" )) return super.getAnimation( arg1); return (android.content.res.XmlResourceParser) jInterface.Jnido( this, jchildidx + "getAnimation_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.res.XmlResourceParser getXml(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getXml" )) return super.getXml( arg1); return (android.content.res.XmlResourceParser) jInterface.Jnido( this, jchildidx + "getXml_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.io.InputStream openRawResource(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "openRawResource" )) return super.openRawResource( arg1); return (java.io.InputStream) jInterface.Jnido( this, jchildidx + "openRawResource_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.res.AssetFileDescriptor openRawResourceFd(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "openRawResourceFd" )) return super.openRawResourceFd( arg1); return (android.content.res.AssetFileDescriptor) jInterface.Jnido( this, jchildidx + "openRawResourceFd_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.res.TypedArray obtainAttributes(android.util.AttributeSet arg1,int[] arg2) { if (!testjnOverride( "obtainAttributes" )) return super.obtainAttributes( arg1, arg2); return (android.content.res.TypedArray) jInterface.Jnido( this, jchildidx + "obtainAttributes_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.util.DisplayMetrics getDisplayMetrics(){ if (!testjnOverride( "getDisplayMetrics" )) return super.getDisplayMetrics(); return (android.util.DisplayMetrics) jInterface.Jnido( this, jchildidx + "getDisplayMetrics_" + jlocale + "_", null ); }
@Override public android.content.res.Configuration getConfiguration(){ if (!testjnOverride( "getConfiguration" )) return super.getConfiguration(); return (android.content.res.Configuration) jInterface.Jnido( this, jchildidx + "getConfiguration_" + jlocale + "_", null ); }
@Override public int getIdentifier(java.lang.String arg1,java.lang.String arg2,java.lang.String arg3) { if (!testjnOverride( "getIdentifier" )) return super.getIdentifier( arg1, arg2, arg3); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getIdentifier_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public java.lang.String getResourceName(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getResourceName" )) return super.getResourceName( arg1); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getResourceName_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String getResourcePackageName(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getResourcePackageName" )) return super.getResourcePackageName( arg1); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getResourcePackageName_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String getResourceTypeName(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getResourceTypeName" )) return super.getResourceTypeName( arg1); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getResourceTypeName_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String getResourceEntryName(int arg1) throws android.content.res.Resources.NotFoundException { if (!testjnOverride( "getResourceEntryName" )) return super.getResourceEntryName( arg1); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getResourceEntryName_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
}

package org.dykman.jn.android.test.mock;
public class MockPackageManager extends android.test.mock.MockPackageManager{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public MockPackageManager(String jlocale,String jchildid,String joverride ){ super(); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", null ); }
@Override public int checkPermission(java.lang.String arg1,java.lang.String arg2) { if (!testjnOverride( "checkPermission" )) return super.checkPermission( arg1, arg2); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "checkPermission_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.content.pm.PackageInfo getPackageInfo(java.lang.String arg1,int arg2) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getPackageInfo" )) return super.getPackageInfo( arg1, arg2); return (android.content.pm.PackageInfo) jInterface.Jnido( this, jchildidx + "getPackageInfo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.content.Intent getLaunchIntentForPackage(java.lang.String arg1) { if (!testjnOverride( "getLaunchIntentForPackage" )) return super.getLaunchIntentForPackage( arg1); return (android.content.Intent) jInterface.Jnido( this, jchildidx + "getLaunchIntentForPackage_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int[] getPackageGids(java.lang.String arg1) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getPackageGids" )) return super.getPackageGids( arg1); return (int[]) jInterface.Jnidoi( this, jchildidx + "getPackageGids_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.pm.PermissionInfo getPermissionInfo(java.lang.String arg1,int arg2) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getPermissionInfo" )) return super.getPermissionInfo( arg1, arg2); return (android.content.pm.PermissionInfo) jInterface.Jnido( this, jchildidx + "getPermissionInfo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.util.List queryPermissionsByGroup(java.lang.String arg1,int arg2) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "queryPermissionsByGroup" )) return super.queryPermissionsByGroup( arg1, arg2); return (java.util.List) jInterface.Jnido( this, jchildidx + "queryPermissionsByGroup_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String arg1,int arg2) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getPermissionGroupInfo" )) return super.getPermissionGroupInfo( arg1, arg2); return (android.content.pm.PermissionGroupInfo) jInterface.Jnido( this, jchildidx + "getPermissionGroupInfo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.util.List getAllPermissionGroups(int arg1) { if (!testjnOverride( "getAllPermissionGroups" )) return super.getAllPermissionGroups( arg1); return (java.util.List) jInterface.Jnido( this, jchildidx + "getAllPermissionGroups_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String arg1,int arg2) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getApplicationInfo" )) return super.getApplicationInfo( arg1, arg2); return (android.content.pm.ApplicationInfo) jInterface.Jnido( this, jchildidx + "getApplicationInfo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName arg1,int arg2) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getActivityInfo" )) return super.getActivityInfo( arg1, arg2); return (android.content.pm.ActivityInfo) jInterface.Jnido( this, jchildidx + "getActivityInfo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName arg1,int arg2) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getReceiverInfo" )) return super.getReceiverInfo( arg1, arg2); return (android.content.pm.ActivityInfo) jInterface.Jnido( this, jchildidx + "getReceiverInfo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName arg1,int arg2) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getServiceInfo" )) return super.getServiceInfo( arg1, arg2); return (android.content.pm.ServiceInfo) jInterface.Jnido( this, jchildidx + "getServiceInfo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.util.List getInstalledPackages(int arg1) { if (!testjnOverride( "getInstalledPackages" )) return super.getInstalledPackages( arg1); return (java.util.List) jInterface.Jnido( this, jchildidx + "getInstalledPackages_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean addPermission(android.content.pm.PermissionInfo arg1) { if (!testjnOverride( "addPermission" )) return super.addPermission( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "addPermission_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void removePermission(java.lang.String arg1) { if (!testjnOverride( "removePermission" )) { super.removePermission( arg1); return; } jInterface.Jnido( this, jchildidx + "removePermission_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int checkSignatures(java.lang.String arg1,java.lang.String arg2) { if (!testjnOverride( "checkSignatures" )) return super.checkSignatures( arg1, arg2); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "checkSignatures_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public int checkSignatures(int arg1,int arg2) { if (!testjnOverride( "checkSignatures" )) return super.checkSignatures( arg1, arg2); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "checkSignatures_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.lang.String[] getPackagesForUid(int arg1) { if (!testjnOverride( "getPackagesForUid" )) return super.getPackagesForUid( arg1); return (java.lang.String[]) jInterface.Jnidox( this, jchildidx + "getPackagesForUid_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.String getNameForUid(int arg1) { if (!testjnOverride( "getNameForUid" )) return super.getNameForUid( arg1); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getNameForUid_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.util.List getInstalledApplications(int arg1) { if (!testjnOverride( "getInstalledApplications" )) return super.getInstalledApplications( arg1); return (java.util.List) jInterface.Jnido( this, jchildidx + "getInstalledApplications_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.pm.ResolveInfo resolveActivity(android.content.Intent arg1,int arg2) { if (!testjnOverride( "resolveActivity" )) return super.resolveActivity( arg1, arg2); return (android.content.pm.ResolveInfo) jInterface.Jnido( this, jchildidx + "resolveActivity_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.util.List queryIntentActivities(android.content.Intent arg1,int arg2) { if (!testjnOverride( "queryIntentActivities" )) return super.queryIntentActivities( arg1, arg2); return (java.util.List) jInterface.Jnido( this, jchildidx + "queryIntentActivities_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.util.List queryIntentActivityOptions(android.content.ComponentName arg1,android.content.Intent[] arg2,android.content.Intent arg3,int arg4) { if (!testjnOverride( "queryIntentActivityOptions" )) return super.queryIntentActivityOptions( arg1, arg2, arg3, arg4); return (java.util.List) jInterface.Jnido( this, jchildidx + "queryIntentActivityOptions_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public java.util.List queryBroadcastReceivers(android.content.Intent arg1,int arg2) { if (!testjnOverride( "queryBroadcastReceivers" )) return super.queryBroadcastReceivers( arg1, arg2); return (java.util.List) jInterface.Jnido( this, jchildidx + "queryBroadcastReceivers_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.content.pm.ResolveInfo resolveService(android.content.Intent arg1,int arg2) { if (!testjnOverride( "resolveService" )) return super.resolveService( arg1, arg2); return (android.content.pm.ResolveInfo) jInterface.Jnido( this, jchildidx + "resolveService_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.util.List queryIntentServices(android.content.Intent arg1,int arg2) { if (!testjnOverride( "queryIntentServices" )) return super.queryIntentServices( arg1, arg2); return (java.util.List) jInterface.Jnido( this, jchildidx + "queryIntentServices_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.content.pm.ProviderInfo resolveContentProvider(java.lang.String arg1,int arg2) { if (!testjnOverride( "resolveContentProvider" )) return super.resolveContentProvider( arg1, arg2); return (android.content.pm.ProviderInfo) jInterface.Jnido( this, jchildidx + "resolveContentProvider_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.util.List queryContentProviders(java.lang.String arg1,int arg2,int arg3) { if (!testjnOverride( "queryContentProviders" )) return super.queryContentProviders( arg1, arg2, arg3); return (java.util.List) jInterface.Jnido( this, jchildidx + "queryContentProviders_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName arg1,int arg2) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getInstrumentationInfo" )) return super.getInstrumentationInfo( arg1, arg2); return (android.content.pm.InstrumentationInfo) jInterface.Jnido( this, jchildidx + "getInstrumentationInfo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.util.List queryInstrumentation(java.lang.String arg1,int arg2) { if (!testjnOverride( "queryInstrumentation" )) return super.queryInstrumentation( arg1, arg2); return (java.util.List) jInterface.Jnido( this, jchildidx + "queryInstrumentation_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public android.graphics.drawable.Drawable getDrawable(java.lang.String arg1,int arg2,android.content.pm.ApplicationInfo arg3) { if (!testjnOverride( "getDrawable" )) return super.getDrawable( arg1, arg2, arg3); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getDrawable_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName arg1) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getActivityIcon" )) return super.getActivityIcon( arg1); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getActivityIcon_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.drawable.Drawable getActivityIcon(android.content.Intent arg1) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getActivityIcon" )) return super.getActivityIcon( arg1); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getActivityIcon_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.drawable.Drawable getDefaultActivityIcon(){ if (!testjnOverride( "getDefaultActivityIcon" )) return super.getDefaultActivityIcon(); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getDefaultActivityIcon_" + jlocale + "_", null ); }
@Override public android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo arg1) { if (!testjnOverride( "getApplicationIcon" )) return super.getApplicationIcon( arg1); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getApplicationIcon_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.drawable.Drawable getApplicationIcon(java.lang.String arg1) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getApplicationIcon" )) return super.getApplicationIcon( arg1); return (android.graphics.drawable.Drawable) jInterface.Jnido( this, jchildidx + "getApplicationIcon_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.lang.CharSequence getText(java.lang.String arg1,int arg2,android.content.pm.ApplicationInfo arg3) { if (!testjnOverride( "getText" )) return super.getText( arg1, arg2, arg3); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getText_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public android.content.res.XmlResourceParser getXml(java.lang.String arg1,int arg2,android.content.pm.ApplicationInfo arg3) { if (!testjnOverride( "getXml" )) return super.getXml( arg1, arg2, arg3); return (android.content.res.XmlResourceParser) jInterface.Jnido( this, jchildidx + "getXml_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo arg1) { if (!testjnOverride( "getApplicationLabel" )) return super.getApplicationLabel( arg1); return (java.lang.CharSequence) jInterface.Jnido( this, jchildidx + "getApplicationLabel_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.res.Resources getResourcesForActivity(android.content.ComponentName arg1) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getResourcesForActivity" )) return super.getResourcesForActivity( arg1); return (android.content.res.Resources) jInterface.Jnido( this, jchildidx + "getResourcesForActivity_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo arg1) { if (!testjnOverride( "getResourcesForApplication" )) return super.getResourcesForApplication( arg1); return (android.content.res.Resources) jInterface.Jnido( this, jchildidx + "getResourcesForApplication_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.res.Resources getResourcesForApplication(java.lang.String arg1) throws android.content.pm.PackageManager.NameNotFoundException { if (!testjnOverride( "getResourcesForApplication" )) return super.getResourcesForApplication( arg1); return (android.content.res.Resources) jInterface.Jnido( this, jchildidx + "getResourcesForApplication_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String arg1,int arg2) { if (!testjnOverride( "getPackageArchiveInfo" )) return super.getPackageArchiveInfo( arg1, arg2); return (android.content.pm.PackageInfo) jInterface.Jnido( this, jchildidx + "getPackageArchiveInfo_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
@Override public java.lang.String getInstallerPackageName(java.lang.String arg1) { if (!testjnOverride( "getInstallerPackageName" )) return super.getInstallerPackageName( arg1); return (java.lang.String) jInterface.Jnido( this, jchildidx + "getInstallerPackageName_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void addPackageToPreferred(java.lang.String arg1) { if (!testjnOverride( "addPackageToPreferred" )) { super.addPackageToPreferred( arg1); return; } jInterface.Jnido( this, jchildidx + "addPackageToPreferred_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void removePackageFromPreferred(java.lang.String arg1) { if (!testjnOverride( "removePackageFromPreferred" )) { super.removePackageFromPreferred( arg1); return; } jInterface.Jnido( this, jchildidx + "removePackageFromPreferred_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.util.List getPreferredPackages(int arg1) { if (!testjnOverride( "getPreferredPackages" )) return super.getPreferredPackages( arg1); return (java.util.List) jInterface.Jnido( this, jchildidx + "getPreferredPackages_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setComponentEnabledSetting(android.content.ComponentName arg1,int arg2,int arg3) { if (!testjnOverride( "setComponentEnabledSetting" )) { super.setComponentEnabledSetting( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "setComponentEnabledSetting_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int getComponentEnabledSetting(android.content.ComponentName arg1) { if (!testjnOverride( "getComponentEnabledSetting" )) return super.getComponentEnabledSetting( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getComponentEnabledSetting_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setApplicationEnabledSetting(java.lang.String arg1,int arg2,int arg3) { if (!testjnOverride( "setApplicationEnabledSetting" )) { super.setApplicationEnabledSetting( arg1, arg2, arg3); return; } jInterface.Jnido( this, jchildidx + "setApplicationEnabledSetting_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public int getApplicationEnabledSetting(java.lang.String arg1) { if (!testjnOverride( "getApplicationEnabledSetting" )) return super.getApplicationEnabledSetting( arg1); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getApplicationEnabledSetting_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void addPreferredActivity(android.content.IntentFilter arg1,int arg2,android.content.ComponentName[] arg3,android.content.ComponentName arg4) { if (!testjnOverride( "addPreferredActivity" )) { super.addPreferredActivity( arg1, arg2, arg3, arg4); return; } jInterface.Jnido( this, jchildidx + "addPreferredActivity_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3, arg4 } ); }
@Override public void clearPackagePreferredActivities(java.lang.String arg1) { if (!testjnOverride( "clearPackagePreferredActivities" )) { super.clearPackagePreferredActivities( arg1); return; } jInterface.Jnido( this, jchildidx + "clearPackagePreferredActivities_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getPreferredActivities(java.util.List arg1,java.util.List arg2,java.lang.String arg3) { if (!testjnOverride( "getPreferredActivities" )) return super.getPreferredActivities( arg1, arg2, arg3); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getPreferredActivities_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public java.lang.String[] getSystemSharedLibraryNames(){ if (!testjnOverride( "getSystemSharedLibraryNames" )) return super.getSystemSharedLibraryNames(); return (java.lang.String[]) jInterface.Jnidox( this, jchildidx + "getSystemSharedLibraryNames_" + jlocale + "_", null ); }
@Override public android.content.pm.FeatureInfo[] getSystemAvailableFeatures(){ if (!testjnOverride( "getSystemAvailableFeatures" )) return super.getSystemAvailableFeatures(); return (android.content.pm.FeatureInfo[]) jInterface.Jnidox( this, jchildidx + "getSystemAvailableFeatures_" + jlocale + "_", null ); }
@Override public boolean hasSystemFeature(java.lang.String arg1) { if (!testjnOverride( "hasSystemFeature" )) return super.hasSystemFeature( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "hasSystemFeature_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isSafeMode(){ if (!testjnOverride( "isSafeMode" )) return super.isSafeMode(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isSafeMode_" + jlocale + "_", null ); }
}

package org.dykman.jn.android.gesture;
public class GestureOverlayView extends android.gesture.GestureOverlayView{
protected org.dykman.j.JInterface jInterface = null;
protected java.lang.String jlocale = null;
protected java.lang.String jchildid = null;
protected java.lang.String jchildidx = null;
protected java.util.ArrayList jnOverrideList = null;
protected void jparseargs (java.lang.String jlocale, java.lang.String jchildid, java.lang.String joverride ) { this.jlocale = jlocale; this.jchildid = jchildid; if (jchildid != null && jchildid.length() > 0) jchildidx = jchildid + "_"; else jchildidx = ""; if (joverride != null && joverride.length() > 0) { java.lang.String[] ss = joverride.split(" "); for (int i = 0; i < ss.length; i++) setjnOverride(ss[i]); } }
public void clearjnOverride () { jnOverrideList.clear (); }
public void setjnOverride (java.lang.String arg1 ) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); }
public void setjnOverride (java.lang.String arg1, boolean arg2 ) { if (arg2) { if (!testjnOverride (arg1)) jnOverrideList.add (arg1); } else jnOverrideList.remove (arg1); }
public boolean testjnOverride (java.lang.String arg1 ) { return jnOverrideList.contains (arg1); }
public GestureOverlayView(android.content.Context arg1, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
public GestureOverlayView(android.content.Context arg1,android.util.AttributeSet arg2, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2 } ); }
public GestureOverlayView(android.content.Context arg1,android.util.AttributeSet arg2,int arg3, java.lang.String jlocale,String jchildid,String joverride ) { super( arg1, arg2, arg3); jnOverrideList = new java.util.ArrayList(); jparseargs( jlocale, jchildid, joverride ); jInterface = org.dykman.j.android.JConsoleApp.theApp.jInterface; if (testjnOverride( "jcreate" )) jInterface.Jnido( this, jchildidx + "jcreate_" + jlocale + "_", new java.lang.Object[]{ arg1, arg2, arg3 } ); }
@Override public void clear(boolean arg1) { if (!testjnOverride( "clear" )) { super.clear( arg1); return; } jInterface.Jnido( this, jchildidx + "clear_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public java.util.ArrayList getCurrentStroke(){ if (!testjnOverride( "getCurrentStroke" )) return super.getCurrentStroke(); return (java.util.ArrayList) jInterface.Jnido( this, jchildidx + "getCurrentStroke_" + jlocale + "_", null ); }
@Override public int getOrientation(){ if (!testjnOverride( "getOrientation" )) return super.getOrientation(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getOrientation_" + jlocale + "_", null ); }
@Override public void setOrientation(int arg1) { if (!testjnOverride( "setOrientation" )) { super.setOrientation( arg1); return; } jInterface.Jnido( this, jchildidx + "setOrientation_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setGestureColor(int arg1) { if (!testjnOverride( "setGestureColor" )) { super.setGestureColor( arg1); return; } jInterface.Jnido( this, jchildidx + "setGestureColor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void setUncertainGestureColor(int arg1) { if (!testjnOverride( "setUncertainGestureColor" )) { super.setUncertainGestureColor( arg1); return; } jInterface.Jnido( this, jchildidx + "setUncertainGestureColor_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getUncertainGestureColor(){ if (!testjnOverride( "getUncertainGestureColor" )) return super.getUncertainGestureColor(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getUncertainGestureColor_" + jlocale + "_", null ); }
@Override public int getGestureColor(){ if (!testjnOverride( "getGestureColor" )) return super.getGestureColor(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getGestureColor_" + jlocale + "_", null ); }
@Override public float getGestureStrokeWidth(){ if (!testjnOverride( "getGestureStrokeWidth" )) return super.getGestureStrokeWidth(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getGestureStrokeWidth_" + jlocale + "_", null ); }
@Override public void setGestureStrokeWidth(float arg1) { if (!testjnOverride( "setGestureStrokeWidth" )) { super.setGestureStrokeWidth( arg1); return; } jInterface.Jnido( this, jchildidx + "setGestureStrokeWidth_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public int getGestureStrokeType(){ if (!testjnOverride( "getGestureStrokeType" )) return super.getGestureStrokeType(); return (java.lang.Integer) jInterface.Jnido( this, jchildidx + "getGestureStrokeType_" + jlocale + "_", null ); }
@Override public void setGestureStrokeType(int arg1) { if (!testjnOverride( "setGestureStrokeType" )) { super.setGestureStrokeType( arg1); return; } jInterface.Jnido( this, jchildidx + "setGestureStrokeType_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public float getGestureStrokeLengthThreshold(){ if (!testjnOverride( "getGestureStrokeLengthThreshold" )) return super.getGestureStrokeLengthThreshold(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getGestureStrokeLengthThreshold_" + jlocale + "_", null ); }
@Override public void setGestureStrokeLengthThreshold(float arg1) { if (!testjnOverride( "setGestureStrokeLengthThreshold" )) { super.setGestureStrokeLengthThreshold( arg1); return; } jInterface.Jnido( this, jchildidx + "setGestureStrokeLengthThreshold_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public float getGestureStrokeSquarenessTreshold(){ if (!testjnOverride( "getGestureStrokeSquarenessTreshold" )) return super.getGestureStrokeSquarenessTreshold(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getGestureStrokeSquarenessTreshold_" + jlocale + "_", null ); }
@Override public void setGestureStrokeSquarenessTreshold(float arg1) { if (!testjnOverride( "setGestureStrokeSquarenessTreshold" )) { super.setGestureStrokeSquarenessTreshold( arg1); return; } jInterface.Jnido( this, jchildidx + "setGestureStrokeSquarenessTreshold_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public float getGestureStrokeAngleThreshold(){ if (!testjnOverride( "getGestureStrokeAngleThreshold" )) return super.getGestureStrokeAngleThreshold(); return (java.lang.Float) jInterface.Jnido( this, jchildidx + "getGestureStrokeAngleThreshold_" + jlocale + "_", null ); }
@Override public void setGestureStrokeAngleThreshold(float arg1) { if (!testjnOverride( "setGestureStrokeAngleThreshold" )) { super.setGestureStrokeAngleThreshold( arg1); return; } jInterface.Jnido( this, jchildidx + "setGestureStrokeAngleThreshold_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isEventsInterceptionEnabled(){ if (!testjnOverride( "isEventsInterceptionEnabled" )) return super.isEventsInterceptionEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isEventsInterceptionEnabled_" + jlocale + "_", null ); }
@Override public void setEventsInterceptionEnabled(boolean arg1) { if (!testjnOverride( "setEventsInterceptionEnabled" )) { super.setEventsInterceptionEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setEventsInterceptionEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isFadeEnabled(){ if (!testjnOverride( "isFadeEnabled" )) return super.isFadeEnabled(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isFadeEnabled_" + jlocale + "_", null ); }
@Override public void setFadeEnabled(boolean arg1) { if (!testjnOverride( "setFadeEnabled" )) { super.setFadeEnabled( arg1); return; } jInterface.Jnido( this, jchildidx + "setFadeEnabled_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.gesture.Gesture getGesture(){ if (!testjnOverride( "getGesture" )) return super.getGesture(); return (android.gesture.Gesture) jInterface.Jnido( this, jchildidx + "getGesture_" + jlocale + "_", null ); }
@Override public void setGesture(android.gesture.Gesture arg1) { if (!testjnOverride( "setGesture" )) { super.setGesture( arg1); return; } jInterface.Jnido( this, jchildidx + "setGesture_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public android.graphics.Path getGesturePath(){ if (!testjnOverride( "getGesturePath" )) return super.getGesturePath(); return (android.graphics.Path) jInterface.Jnido( this, jchildidx + "getGesturePath_" + jlocale + "_", null ); }
@Override public android.graphics.Path getGesturePath(android.graphics.Path arg1) { if (!testjnOverride( "getGesturePath" )) return super.getGesturePath( arg1); return (android.graphics.Path) jInterface.Jnido( this, jchildidx + "getGesturePath_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public boolean isGestureVisible(){ if (!testjnOverride( "isGestureVisible" )) return super.isGestureVisible(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isGestureVisible_" + jlocale + "_", null ); }
@Override public void setGestureVisible(boolean arg1) { if (!testjnOverride( "setGestureVisible" )) { super.setGestureVisible( arg1); return; } jInterface.Jnido( this, jchildidx + "setGestureVisible_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public long getFadeOffset(){ if (!testjnOverride( "getFadeOffset" )) return super.getFadeOffset(); return (java.lang.Long) jInterface.Jnido( this, jchildidx + "getFadeOffset_" + jlocale + "_", null ); }
@Override public void setFadeOffset(long arg1) { if (!testjnOverride( "setFadeOffset" )) { super.setFadeOffset( arg1); return; } jInterface.Jnido( this, jchildidx + "setFadeOffset_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void addOnGestureListener(android.gesture.GestureOverlayView.OnGestureListener arg1) { if (!testjnOverride( "addOnGestureListener" )) { super.addOnGestureListener( arg1); return; } jInterface.Jnido( this, jchildidx + "addOnGestureListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void removeOnGestureListener(android.gesture.GestureOverlayView.OnGestureListener arg1) { if (!testjnOverride( "removeOnGestureListener" )) { super.removeOnGestureListener( arg1); return; } jInterface.Jnido( this, jchildidx + "removeOnGestureListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void removeAllOnGestureListeners(){ if (!testjnOverride( "removeAllOnGestureListeners" )) { super.removeAllOnGestureListeners(); return; } jInterface.Jnido( this, jchildidx + "removeAllOnGestureListeners_" + jlocale + "_", null ); }
@Override public void addOnGesturePerformedListener(android.gesture.GestureOverlayView.OnGesturePerformedListener arg1) { if (!testjnOverride( "addOnGesturePerformedListener" )) { super.addOnGesturePerformedListener( arg1); return; } jInterface.Jnido( this, jchildidx + "addOnGesturePerformedListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void removeOnGesturePerformedListener(android.gesture.GestureOverlayView.OnGesturePerformedListener arg1) { if (!testjnOverride( "removeOnGesturePerformedListener" )) { super.removeOnGesturePerformedListener( arg1); return; } jInterface.Jnido( this, jchildidx + "removeOnGesturePerformedListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void removeAllOnGesturePerformedListeners(){ if (!testjnOverride( "removeAllOnGesturePerformedListeners" )) { super.removeAllOnGesturePerformedListeners(); return; } jInterface.Jnido( this, jchildidx + "removeAllOnGesturePerformedListeners_" + jlocale + "_", null ); }
@Override public void addOnGesturingListener(android.gesture.GestureOverlayView.OnGesturingListener arg1) { if (!testjnOverride( "addOnGesturingListener" )) { super.addOnGesturingListener( arg1); return; } jInterface.Jnido( this, jchildidx + "addOnGesturingListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void removeOnGesturingListener(android.gesture.GestureOverlayView.OnGesturingListener arg1) { if (!testjnOverride( "removeOnGesturingListener" )) { super.removeOnGesturingListener( arg1); return; } jInterface.Jnido( this, jchildidx + "removeOnGesturingListener_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void removeAllOnGesturingListeners(){ if (!testjnOverride( "removeAllOnGesturingListeners" )) { super.removeAllOnGesturingListeners(); return; } jInterface.Jnido( this, jchildidx + "removeAllOnGesturingListeners_" + jlocale + "_", null ); }
@Override public boolean isGesturing(){ if (!testjnOverride( "isGesturing" )) return super.isGesturing(); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "isGesturing_" + jlocale + "_", null ); }
@Override public void draw(android.graphics.Canvas arg1) { if (!testjnOverride( "draw" )) { super.draw( arg1); return; } jInterface.Jnido( this, jchildidx + "draw_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
@Override public void cancelClearAnimation(){ if (!testjnOverride( "cancelClearAnimation" )) { super.cancelClearAnimation(); return; } jInterface.Jnido( this, jchildidx + "cancelClearAnimation_" + jlocale + "_", null ); }
@Override public void cancelGesture(){ if (!testjnOverride( "cancelGesture" )) { super.cancelGesture(); return; } jInterface.Jnido( this, jchildidx + "cancelGesture_" + jlocale + "_", null ); }
@Override protected void onDetachedFromWindow(){ if (!testjnOverride( "onDetachedFromWindow" )) { super.onDetachedFromWindow(); return; } jInterface.Jnido( this, jchildidx + "onDetachedFromWindow_" + jlocale + "_", null ); }
@Override public boolean dispatchTouchEvent(android.view.MotionEvent arg1) { if (!testjnOverride( "dispatchTouchEvent" )) return super.dispatchTouchEvent( arg1); return (java.lang.Boolean) jInterface.Jnido( this, jchildidx + "dispatchTouchEvent_" + jlocale + "_", new java.lang.Object[]{ arg1 } ); }
}
